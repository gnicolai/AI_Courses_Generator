import httpx
import json
import os
import random
import asyncio
from typing import Dict, List, Any, Optional, Callable
import logging
from app.config import load_config, save_config, get_config_value
from app.api.model_support import prepare_messages, prepare_api_parameters, get_model_config, is_parameter_supported, get_supported_parameters

# Configurazione logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def retry_with_exponential_backoff(
    func: Callable,
    max_retries: int = 3,
    initial_backoff: float = 1.0,
    backoff_factor: float = 2.0,
    jitter: bool = True
) -> Any:
    """
    Esegue una funzione con retry e backoff esponenziale.
    
    Args:
        func: La funzione asincrona da eseguire
        max_retries: Numero massimo di tentativi
        initial_backoff: Tempo di attesa iniziale in secondi
        backoff_factor: Fattore di crescita del tempo di attesa
        jitter: Se aggiungere una componente casuale al tempo di attesa
        
    Returns:
        Il risultato della funzione o solleva l'ultima eccezione
    """
    retries = 0
    backoff = initial_backoff
    
    while True:
        try:
            return await func()
        except (httpx.TimeoutException, 
                httpx.ReadTimeout, 
                httpx.ConnectTimeout, 
                httpx.RemoteProtocolError) as e:
            retries += 1
            if retries > max_retries:
                logger.warning(f"Numero massimo di tentativi raggiunto ({max_retries}). Ultimo errore: {str(e)}")
                raise
            
            # Calcola il tempo di attesa con jitter se richiesto
            wait_time = backoff
            if jitter:
                wait_time = backoff * (0.5 + random.random())
                
            logger.info(f"Tentativo {retries}/{max_retries} fallito: {str(e)}. Riprovo tra {wait_time:.2f} secondi...")
            await asyncio.sleep(wait_time)
            
            # Aggiorna il backoff per il prossimo tentativo
            backoff *= backoff_factor

class AIClient:
    """Client base per le API di intelligenza artificiale."""
    
    def __init__(self, api_key: str, base_url: str, provider: str):
        self.api_key = api_key
        self.base_url = base_url
        self.provider = provider
        logger.info(f"Inizializzato client {provider} con URL: {base_url}")
    
    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Metodo astratto per la generazione della scaletta."""
        raise NotImplementedError("Questo metodo deve essere implementato nelle classi derivate")
    
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Metodo astratto per la generazione del contenuto di un capitolo."""
        raise NotImplementedError("Questo metodo deve essere implementato nelle classi derivate")

class DeepSeekClient(AIClient):
    """Client per l'API DeepSeek."""
    
    def __init__(self, api_key: str, base_url: str = "https://api.deepseek.com"):
        super().__init__(api_key, base_url, "deepseek")
    
    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Genera la scaletta di un corso usando l'API DeepSeek."""
        try:
            logger.info(f"Generazione scaletta corso con DeepSeek: {parametri['titolo']}")
            
            # Determina la complessità della scaletta in base al livello
            livello = parametri['livello_complessita'].lower()
            if livello == 'base' or livello == 'principiante':
                num_capitoli = "3-4"
                num_sottocapitoli = "2-3"
                profondita = "semplice e introduttiva"
            elif livello == 'intermedio':
                num_capitoli = "4-6"
                num_sottocapitoli = "3-5"
                profondita = "moderatamente dettagliata"
            else:  # avanzato o esperto
                num_capitoli = "6-10"
                num_sottocapitoli = "4-8"
                profondita = "molto approfondita e completa, con concetti avanzati, esempi pratici estesi, casi di studio e applicazioni reali"
            
            # Costruisci il prompt per la generazione della scaletta
            template_prompt = """
            Sei un assistente esperto nella creazione di corsi formativi. 
            
            Devi generare la scaletta dettagliata per un corso con i seguenti parametri:
            
            Titolo: {titolo}
            Descrizione: {descrizione}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            Genera una scaletta in formato JSON con la seguente struttura:
            {{
              "titolo": "Titolo del corso",
              "descrizione": "Breve descrizione del corso",
              "durata_stimata": "XX ore",
              "capitoli": [
                {{
                  "id": "cap1",
                  "titolo": "Titolo Capitolo 1",
                  "descrizione": "Descrizione dettagliata del capitolo",
                  "sottoargomenti": [
                    {{
                      "titolo": "Titolo Sottoargomento 1.1",
                      "punti_chiave": ["punto 1", "punto 2", "punto 3"]
                    }},
                    // altri sottoargomenti
                  ]
                }},
                // altri capitoli
              ]
            }}
            
            Crea una struttura logica e progressiva che faciliti l'apprendimento.
            
            ISTRUZIONI IMPORTANTI:
            - Se sono stati specificati requisiti o risorse particolari, assicurati di INCLUDERLI ESPLICITAMENTE nella scaletta. 
            - Se sono menzionate risorse, tecnologie, metodi o concetti specifici nei requisiti, dedicagli capitoli o sottocapitoli appropriati.
            - Ogni risorsa o concetto nei requisiti deve essere visibilmente incluso nella scaletta finale.
            
            Poiché questo corso è di livello {livello_complessita}, deve essere {profondita}.
            - Includi {num_capitoli} capitoli con {num_sottocapitoli} sottoargomenti ciascuno, mantenendo un'elevata coerenza tematica.
            - Assicurati che i sottoargomenti coprano adeguatamente tutti gli aspetti del tema, dagli aspetti teorici alle applicazioni pratiche.
            - I punti chiave devono essere specifici e dettagliati, non generici.
            - Per un corso avanzato sul prompting, copri a fondo aspetti come: tecniche avanzate, pattern di prompt, strategie per diversi modelli e task, ottimizzazione, debugging, casi d'uso specialistici, personalizzazione, risoluzione di problemi comuni, e valutazione dell'efficacia.
            
            Ogni capitolo deve avere un ID univoco (cap1, cap2, ecc.). Assicurati che il JSON sia ben formato e valido.
            """
            
            # Sostituisci i valori nel template
            requisiti = parametri.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"""REQUISITI SPECIFICI DA INCORPORARE NELLA SCALETTA:
-------------------------------------------------
{requisiti}
-------------------------------------------------"""
            
            stile_scrittura = parametri.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"""

STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
            
            prompt = template_prompt.format(
                titolo=parametri['titolo'],
                descrizione=parametri['descrizione'],
                pubblico_target=parametri['pubblico_target'],
                livello_complessita=parametri['livello_complessita'],
                tono=parametri['tono'],
                requisiti_specifici=requisiti,
                profondita=profondita,
                num_capitoli=num_capitoli,
                num_sottocapitoli=num_sottocapitoli
            )
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 4000
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/completions",
                            headers=headers,
                            json=payload,
                            timeout=120.0  # Aumentiamo il timeout a 2 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API DeepSeek dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API DeepSeek: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API DeepSeek: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API DeepSeek: {error_msg}"
                    }
                
                try:
                    # Estrai la scaletta dal messaggio di risposta
                    content = response_data['choices'][0]['text']
                    
                    # Cerca il JSON nella risposta
                    import re
                    json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                    
                    if json_match:
                        scaletta_json = json_match.group(1)
                    else:
                        # Prova a trovare un oggetto JSON nella risposta
                        json_match = re.search(r'({[\s\S]*})', content)
                        if json_match:
                            scaletta_json = json_match.group(1)
                        else:
                            # Se non troviamo un JSON, riportiamo un errore
                            logger.error(f"Impossibile trovare un oggetto JSON nella risposta: {content[:200]}...")
                            return {
                                "success": False,
                                "message": "La risposta dell'API non contiene un oggetto JSON valido"
                            }
                    
                    # Pulisce il JSON da eventuali commenti o caratteri non validi
                    # Rimuove i commenti con // alla fine delle righe
                    scaletta_json = re.sub(r'//.*$', '', scaletta_json, flags=re.MULTILINE)
                    
                    try:
                        scaletta = json.loads(scaletta_json)
                    except json.JSONDecodeError as e:
                        logger.error(f"Errore nel parsing JSON: {str(e)}")
                        logger.error(f"JSON con errore: {scaletta_json[:200]}...")
                        
                        # Tentativo più aggressivo di pulizia del JSON
                        try:
                            # Rimuove i commenti con //
                            clean_json = re.sub(r'//.*?(\n|$)', '\n', scaletta_json)
                            # Rimuove le virgole trailing prima delle parentesi chiuse
                            clean_json = re.sub(r',\s*}', '}', clean_json)
                            clean_json = re.sub(r',\s*]', ']', clean_json)
                            
                            scaletta = json.loads(clean_json)
                            logger.info("Recupero JSON riuscito dopo pulizia aggressiva")
                        except Exception as inner_e:
                            logger.error(f"Errore nel secondo tentativo di parsing JSON: {str(inner_e)}")
                            return {
                                "success": False,
                                "message": f"Errore nel parsing del JSON: {str(e)}"
                            }
                    
                    # Verifica che la scaletta contenga i campi minimi necessari
                    if not all(k in scaletta for k in ['titolo', 'descrizione', 'capitoli']):
                        logger.error(f"JSON mancante di campi obbligatori: {scaletta.keys()}")
                        return {
                            "success": False,
                            "message": "La scaletta generata è incompleta o malformata"
                        }
                    
                    return {
                        "success": True,
                        "scaletta": scaletta
                    }
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione della scaletta: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione della scaletta: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione della scaletta: {str(e)}"
            }
    
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera il contenuto di un capitolo specifico usando l'API DeepSeek."""
        try:
            logger.info(f"Generazione contenuto capitolo con DeepSeek: {capitolo_id}")
            
            # Trova il capitolo da generare
            capitolo = None
            for cap in scaletta['capitoli']:
                if cap['id'] == capitolo_id:
                    capitolo = cap
                    break
            
            if not capitolo:
                return {
                    "success": False,
                    "message": f"Capitolo con ID {capitolo_id} non trovato"
                }
            
            # Costruisci il prompt per la generazione del contenuto
            template_prompt = """
            Sei un assistente esperto nella creazione di contenuti didattici di alta qualità.
            
            Devi generare il contenuto dettagliato per un capitolo di un corso con i seguenti parametri:
            
            CORSO:
            Titolo: {titolo_corso}
            Descrizione: {descrizione_corso}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            CAPITOLO DA GENERARE:
            Titolo: {titolo_capitolo}
            Descrizione: {descrizione_capitolo}
            
            SOTTOARGOMENTI:
            {sottoargomenti}
            
            {contenuto_precedente}
            
            Genera il contenuto completo del capitolo in formato Markdown. 
            Includi un'introduzione generale al capitolo, e poi sviluppa in dettaglio ogni sottoargomento.
            Per ogni sottoargomento, crea una sezione con un titolo di secondo livello (##), seguito da un testo
            esplicativo dettagliato che copra tutti i punti chiave elencati.
            
            Il contenuto deve essere approfondito, accurato ed educativo, mantenendo il livello di complessità e il tono richiesti.
            Includi esempi pratici, analogie dove appropriato, e una conclusione che riassuma i concetti chiave del capitolo.
            """
            
            # Formatta i sottoargomenti
            sottoargomenti_str = ""
            
            # Gestisci sia il vecchio formato (sottoargomenti) che il nuovo (sottocapitoli)
            sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
            
            for i, sotto in enumerate(sotto_items):
                sottoargomenti_str += f"Sottoargomento {i+1}: {sotto['titolo']}\n"
                # Gestisci sia i punti_chiave che descrizioni più generiche
                if 'punti_chiave' in sotto:
                    sottoargomenti_str += "Punti chiave:\n"
                    for punto in sotto['punti_chiave']:
                        sottoargomenti_str += f"- {punto}\n"
                elif 'descrizione' in sotto:
                    sottoargomenti_str += f"Descrizione: {sotto['descrizione']}\n"
                sottoargomenti_str += "\n"
            
            # Formatta eventuali contenuti precedenti
            contenuto_precedente_str = ""
            if contenuto_precedente and len(contenuto_precedente) > 0:
                contenuto_precedente_str = "CONTENUTO DEI CAPITOLI PRECEDENTI (per mantenere la coerenza):\n"
                for prev_cap in contenuto_precedente:
                    contenuto_precedente_str += f"Capitolo: {prev_cap['titolo']}\n"
                    contenuto_precedente_str += f"Riassunto: {prev_cap['riassunto']}\n\n"
            
            # Sostituisci i valori nel template
            requisiti = parametri_corso.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"Requisiti specifici: {requisiti}"
            
            stile_scrittura = parametri_corso.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"\nStile di scrittura: {stile_scrittura}"
            
            prompt = template_prompt.format(
                titolo_corso=parametri_corso['titolo'],
                descrizione_corso=parametri_corso['descrizione'],
                pubblico_target=parametri_corso['pubblico_target'],
                livello_complessita=parametri_corso['livello_complessita'],
                tono=parametri_corso['tono'],
                requisiti_specifici=requisiti,
                titolo_capitolo=capitolo['titolo'],
                descrizione_capitolo=capitolo['descrizione'],
                sottoargomenti=sottoargomenti_str,
                contenuto_precedente=contenuto_precedente_str
            )
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 4000
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API DeepSeek dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API DeepSeek: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API DeepSeek: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API DeepSeek: {error_msg}"
                    }
                
                try:
                    # Estrai il contenuto dal messaggio di risposta
                    content = response_data['choices'][0]['message']['content']
                    
                    return {
                        "success": True,
                        "contenuto": content
                    }
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione del contenuto: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione del contenuto: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione del contenuto: {str(e)}"
            }

import httpx
import json
import os
import random
import asyncio
from typing import Dict, List, Any, Optional, Callable
import logging
from app.config import load_config, save_config, get_config_value
from app.api.model_support import prepare_messages, prepare_api_parameters, get_model_config, is_parameter_supported, get_supported_parameters

# Configurazione logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AIClient:
    """Client base per le API di intelligenza artificiale."""
    
    def __init__(self, api_key: str, base_url: str, provider: str):
        """Inizializza il client."""
        self.api_key = api_key
        self.base_url = base_url
        self.provider = provider
        
        # Configurazione del modello da utilizzare (configurabile)
        config = load_config()
        self.model = config.get("openai_model", "o1-preview")  # Default a o1-preview per massima qualità
        
        # Limitazione ai soli modelli di alta qualità per garantire output eccellenti
        # Nessun fallback a modelli di qualità inferiore come gpt-3.5
        self.fallback_models = [
            "o1-preview", "o1", "gpt-4o-1", "gpt-4o",   # Modelli di massima qualità
            "gpt-4-turbo", "gpt-4"                      # Modelli gpt-4 di alta qualità
        ]
        
        # Log all models we're going to try
        logger.info(f"Modelli di alta qualità disponibili: {', '.join(self.fallback_models)}")
        
        # Verifica i modelli disponibili all'avvio
        self.available_models = []
        self._check_models_sync()
    
    def _check_models_sync(self):
        """Verifica i modelli disponibili in modo sincrono (solo all'avvio)."""
        import requests  # Usiamo requests per la chiamata sincrona
        
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            response = requests.get(
                f"{self.base_url}/v1/models",
                headers=headers,
                timeout=10.0
            )
            
            if response.status_code == 200:
                models_data = response.json()
                available_models = [model["id"] for model in models_data.get("data", [])]
                self.available_models = available_models
                
                logger.info(f"Modelli OpenAI disponibili: {', '.join(available_models[:10])}...")
                logger.info(f"Totale modelli disponibili: {len(available_models)}")
                
                # Verifica quali modelli di alta qualità sono disponibili
                premium_models = [m for m in self.fallback_models if m in available_models]
                
                if premium_models:
                    # Filtra solo i modelli di alta qualità
                    logger.info(f"Modelli di alta qualità disponibili nell'API: {', '.join(premium_models)}")
                    self.fallback_models = premium_models
                    
                    # IMPORTANTE: Forza l'uso di o1-preview se disponibile
                    if "o1-preview" in premium_models:
                        self.model = "o1-preview"
                        logger.info("Forzato utilizzo di o1-preview come modello principale (massima qualità)")
                        # Aggiorna la configurazione salvata
                        config = load_config()
                        config["openai_model"] = "o1-preview"
                        save_config(config)
                    elif "o1" in premium_models:
                        self.model = "o1"
                        logger.info("Forzato utilizzo di o1 come modello principale (massima qualità)")
                        # Aggiorna la configurazione salvata
                        config = load_config()
                        config["openai_model"] = "o1"
                        save_config(config)
                else:
                    # Avvisa che nessun modello di alta qualità è disponibile
                    logger.warning("ATTENZIONE: Nessun modello di alta qualità è disponibile nel tuo account!")
                    logger.warning("Si consiglia di aggiornare la sottoscrizione OpenAI per accedere ai modelli premium.")
        except Exception as e:
            logger.error(f"Errore durante la verifica dei modelli disponibili: {str(e)}")
            # Continua con i modelli predefiniti
        
    async def check_available_models(self) -> List[str]:
        """Verifica quali modelli sono disponibili per questo progetto OpenAI."""
        if self.available_models:
            return self.available_models
            
        logger.info("Verificando i modelli disponibili nel progetto OpenAI...")
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers,
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    models_data = response.json()
                    available_model_ids = [model["id"] for model in models_data.get("data", [])]
                    self.available_models = available_model_ids
                    
                    # Logga i modelli disponibili
                    logger.info(f"Modelli disponibili nel progetto: {', '.join(available_model_ids)}")
                    
                    # Aggiorna i modelli di fallback per includere solo quelli disponibili
                    self.fallback_models = [model for model in self.fallback_models if model in available_model_ids]
                    
                    if not self.fallback_models and available_model_ids:
                        # Se nessuno dei nostri modelli è disponibile ma ce ne sono altri,
                        # aggiungiamo quelli disponibili alla lista
                        self.fallback_models.extend(available_model_ids)
                        
                    logger.info(f"Modelli di fallback effettivamente disponibili: {', '.join(self.fallback_models)}")
                    
                    return available_model_ids
                else:
                    logger.error(f"Errore nell'ottenere la lista dei modelli: {response.text}")
                    return []
        except Exception as e:
            logger.error(f"Eccezione durante la verifica dei modelli disponibili: {str(e)}")
            return []
            
    async def _call_api_with_fallback(self, prompt: str, capitolo_id: str) -> Dict[str, Any]:
        """Chiama l'API OpenAI con fallback automatico a modelli alternativi se necessario."""
        # Prima di tutto, verifica quali modelli sono disponibili
        available_models = await self.check_available_models()
        
        if not self.fallback_models:
            return {
                "success": False,
                "message": "Nessun modello di alta qualità disponibile. Per garantire risultati eccellenti, " +
                           "è necessario aggiornare la sottoscrizione OpenAI per accedere ai modelli premium (o1-preview, gpt-4o, ecc)."
            }
        
        # PRIORITÀ ASSOLUTA: Riorganizza la lista di fallback per dare priorità a o1-preview se disponibile
        if "o1-preview" in self.fallback_models:
            # Riorganizza la lista per mettere o1-preview come primo elemento
            self.fallback_models = ["o1-preview"] + [m for m in self.fallback_models if m != "o1-preview"]
            logger.info(f"Lista modelli riorganizzata per dare priorità a o1-preview: {', '.join(self.fallback_models)}")
            
            # Forza anche il modello corrente a o1-preview
            self.model = "o1-preview"
            # Aggiorna la configurazione
            config = load_config()
            config["openai_model"] = "o1-preview"
            save_config(config)
        elif "o1" in self.fallback_models:
            # Fallback a o1 se o1-preview non è disponibile
            self.fallback_models = ["o1"] + [m for m in self.fallback_models if m != "o1"]
            logger.info(f"Lista modelli riorganizzata per dare priorità a o1: {', '.join(self.fallback_models)}")
            self.model = "o1"
            # Aggiorna la configurazione
            config = load_config()
            config["openai_model"] = "o1"
            save_config(config)
            
        # Determina l'indice del modello corrente nella lista di fallback
        try:
            current_index = self.fallback_models.index(self.model)
        except ValueError:
            # Se il modello configurato non è nella lista dei modelli di alta qualità disponibili,
            # imposta il modello al primo della lista
            current_index = 0
            if self.fallback_models:
                self.model = self.fallback_models[current_index]
                logger.info(f"Modello configurato non disponibile o non di alta qualità, usando: {self.model}")
            else:
                return {
                    "success": False,
                    "message": "Nessun modello di alta qualità disponibile. L'applicazione richiede modelli premium " +
                               "come o1-preview o gpt-4o per garantire risultati eccellenti."
                }
        
        # Implementiamo un vero meccanismo di fallback, provando modelli in sequenza
        max_attempts = min(5, len(self.fallback_models))  # Limita a 5 tentativi
        attempt = 0
        
        # Lista completa per tentativi di emergenza, inclusi alcuni modelli di backup
        emergency_models = ["o3-mini", "gpt-4-vision-preview"]
        
        while attempt < max_attempts:
            # Usa il modello corrente dalla lista di fallback
            current_model = self.fallback_models[current_index]
            attempt += 1
            
            # Configurazione del payload in base al modello
            tokens_limit = 8000 if current_model.startswith("o1") else 4000
            logger.info(f"Tentativo #{attempt} con modello di alta qualità '{current_model}', limite token={tokens_limit}")
            
            # Adattamento del formato dei messaggi in base al modello
            messages = []
            
            # Alcuni modelli come o1-preview potrebbero non supportare il ruolo 'system'
            # Verifichiamo il modello e adattiamo il formato dei messaggi
            if current_model.startswith("o1-preview") or current_model.startswith("o1-mini"):
                # Per modelli che non supportano 'system', includiamo le istruzioni nel messaggio utente
                system_instruction = "Sei un esperto nella creazione di contenuti didattici di alta qualità.\n\n"
                messages = [
                    {"role": "user", "content": system_instruction + prompt}
                ]
                logger.info(f"Usando formato semplificato dei messaggi per il modello {current_model}")
            else:
                # Per modelli che supportano 'system', usiamo il formato standard
                messages = [
                    {"role": "system", "content": "Sei un esperto nella creazione di contenuti didattici di alta qualità."},
                    {"role": "user", "content": prompt}
                ]
            
            payload = {
                "model": current_model,
                "messages": messages,
            }
            
            # Alcuni modelli come o1-preview usano max_completion_tokens invece di max_tokens
            if current_model.startswith("o1-preview") or current_model.startswith("o1-mini"):
                payload["max_completion_tokens"] = tokens_limit
                logger.info(f"Usando 'max_completion_tokens' per il modello {current_model}")
                # o1-preview non supporta valori personalizzati per temperature
                logger.info(f"Rimuovendo 'temperature' per il modello {current_model} (usa solo valore predefinito)")
                payload.pop("temperature", None)  # Rimuove temperature se presente
            else:
                payload["max_tokens"] = tokens_limit
                payload["temperature"] = 0.7
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            try:
                async with httpx.AsyncClient() as client:
                    # Definisci una funzione interna per la chiamata API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatici
                    logger.info(f"Invio richiesta a OpenAI per modello {current_model} con retry automatici")
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=2,  # Solo 2 tentativi per modello, poi si prova un altro modello
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                    
                    # Processa la risposta
                    response_data = response.json()
                    
                    if response.status_code == 200:
                        # Richiesta riuscita, aggiorna il modello corrente se diverso
                        if self.model != current_model:
                            logger.info(f"Modello di alta qualità '{current_model}' funzionante. Aggiornando la configurazione...")
                            self.model = current_model
                            # Aggiorna la configurazione per le prossime chiamate
                            config = load_config()
                            config["openai_model"] = self.model
                            save_config(config)
                        
                        # Estrai il contenuto dal messaggio di risposta
                        content = response_data['choices'][0]['message']['content']
                        
                        logger.info(f"Contenuto generato con successo usando il modello '{current_model}'")
                        
                        # Restituisci il risultato
                        return {
                            "success": True,
                            "contenuto": content,
                            "modello_utilizzato": current_model
                        }
                    else:
                        # API ha restituito un errore, prova con il prossimo modello
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                        logger.error(f"Errore API OpenAI con modello '{current_model}': {response_data}")
                        logger.warning(f"Tentativo #{attempt} fallito: {error_msg}")
            except httpx.TimeoutException:
                logger.warning(f"Timeout nella richiesta con modello '{current_model}'. Provando un altro modello...")
            except httpx.ReadTimeout:
                logger.warning(f"Read timeout con modello '{current_model}' - il server ha impiegato troppo tempo per rispondere")
            except httpx.ConnectTimeout:
                logger.warning(f"Connect timeout con modello '{current_model}' - impossibile stabilire una connessione")
            except httpx.RemoteProtocolError:
                logger.warning(f"Errore di protocollo remoto con modello '{current_model}' - la connessione è stata chiusa inaspettatamente")
            except httpx.RequestError as e:
                logger.warning(f"Errore di rete con modello '{current_model}': {str(e)}")
            except Exception as e:
                logger.warning(f"Errore generico con modello '{current_model}': {str(e)}")
            
            # Se siamo qui, c'è stato un errore. Prova il prossimo modello
            current_index = (current_index + 1) % len(self.fallback_models)
            continue
        
        # Se tutti i modelli di alta qualità falliscono, proviamo con o3-mini come ultima risorsa
        logger.warning("Tutti i modelli di alta qualità hanno fallito. Provo con o3-mini come ultima risorsa...")
        
        for emergency_model in emergency_models:
            if emergency_model in self.available_models:
                logger.info(f"Tentativo di emergenza con modello {emergency_model}")
                
                emergency_payload = {
                    "model": emergency_model,
                    "messages": [
                        {"role": "system", "content": "Sei un esperto nella creazione di contenuti didattici di alta qualità."},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 4000
                }
                
                if emergency_model == "o3-mini":
                    emergency_payload["reasoning_effort"] = "high"
                
                try:
                    async with httpx.AsyncClient() as client:
                        response = await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=emergency_payload,
                            timeout=120.0
                        )
                        
                        if response.status_code == 200:
                            response_data = response.json()
                            content = response_data['choices'][0]['message']['content']
                            logger.warning(f"Utilizzato modello di emergenza {emergency_model}. Si consiglia di verificare la qualità del contenuto.")
                            return {
                                "success": True,
                                "contenuto": content,
                                "warning": "Contenuto generato con modello di emergenza. La qualità potrebbe essere inferiore.",
                                "modello_utilizzato": emergency_model
                            }
                except Exception as e:
                    logger.error(f"Anche il tentativo di emergenza con {emergency_model} è fallito: {str(e)}")
                    continue
        
        # Se siamo arrivati qui, tutti i tentativi sono falliti
        return {
            "success": False,
            "message": f"Impossibile generare contenuto con modelli di alta qualità. Si consiglia di verificare la sottoscrizione OpenAI per accedere ai modelli premium (o1-preview, gpt-4o)."
        }

    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Genera la scaletta di un corso usando l'API OpenAI."""
        try:
            logger.info(f"Generazione scaletta corso con OpenAI: {parametri['titolo']}")
            
            # Determina la complessità della scaletta in base al livello
            livello = parametri['livello_complessita'].lower()
            if livello == 'base' or livello == 'principiante':
                num_capitoli = "3-4"
                num_sottocapitoli = "2-3"
                profondita = "semplice e introduttiva"
            elif livello == 'intermedio':
                num_capitoli = "4-6"
                num_sottocapitoli = "3-5"
                profondita = "moderatamente dettagliata"
            else:  # avanzato o esperto
                num_capitoli = "6-10"
                num_sottocapitoli = "4-8"
                profondita = "molto approfondita e completa, con concetti avanzati, esempi pratici estesi, casi di studio e applicazioni reali"
            
            # Costruisci il prompt per la generazione della scaletta
            template_prompt = """
            Sei un assistente esperto nella creazione di corsi formativi. 
            
            Devi generare la scaletta dettagliata per un corso con i seguenti parametri:
            
            Titolo: {titolo}
            Descrizione: {descrizione}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            Genera una scaletta in formato JSON con la seguente struttura:
            {{
              "titolo": "Titolo del corso",
              "descrizione": "Breve descrizione del corso",
              "durata_stimata": "XX ore",
              "capitoli": [
                {{
                  "id": "cap1",
                  "titolo": "Titolo Capitolo 1",
                  "descrizione": "Descrizione dettagliata del capitolo",
                  "sottoargomenti": [
                    {{
                      "titolo": "Titolo Sottoargomento 1.1",
                      "punti_chiave": ["punto 1", "punto 2", "punto 3"]
                    }},
                    // altri sottoargomenti
                  ]
                }},
                // altri capitoli
              ]
            }}
            
            Crea una struttura logica e progressiva che faciliti l'apprendimento.
            
            ISTRUZIONI IMPORTANTI:
            - Se sono stati specificati requisiti o risorse particolari, assicurati di INCLUDERLI ESPLICITAMENTE nella scaletta. 
            - Se sono menzionate risorse, tecnologie, metodi o concetti specifici nei requisiti, dedicagli capitoli o sottocapitoli appropriati.
            - Ogni risorsa o concetto nei requisiti deve essere visibilmente incluso nella scaletta finale.
            
            Poiché questo corso è di livello {livello_complessita}, deve essere {profondita}.
            - Includi {num_capitoli} capitoli con {num_sottocapitoli} sottoargomenti ciascuno, mantenendo un'elevata coerenza tematica.
            - Assicurati che i sottoargomenti coprano adeguatamente tutti gli aspetti del tema, dagli aspetti teorici alle applicazioni pratiche.
            - I punti chiave devono essere specifici e dettagliati, non generici.
            - Per un corso avanzato sul prompting, copri a fondo aspetti come: tecniche avanzate, pattern di prompt, strategie per diversi modelli e task, ottimizzazione, debugging, casi d'uso specialistici, personalizzazione, risoluzione di problemi comuni, e valutazione dell'efficacia.
            
            Ogni capitolo deve avere un ID univoco (cap1, cap2, ecc.). Assicurati che il JSON sia ben formato e valido.
            """
            
            # Sostituisci i valori nel template
            requisiti = parametri.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"""REQUISITI SPECIFICI DA INCORPORARE NELLA SCALETTA:
-------------------------------------------------
{requisiti}
-------------------------------------------------"""
            
            stile_scrittura = parametri.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"""

STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
            
            prompt = template_prompt.format(
                titolo=parametri['titolo'],
                descrizione=parametri['descrizione'],
                pubblico_target=parametri['pubblico_target'],
                livello_complessita=parametri['livello_complessita'],
                tono=parametri['tono'],
                requisiti_specifici=requisiti,
                profondita=profondita,
                num_capitoli=num_capitoli,
                num_sottocapitoli=num_sottocapitoli
            )
        
            # Usa uno dei modelli disponibili dal nostro sistema di fallback
            model_to_use = self.fallback_models[0] if self.fallback_models else self.model
            logger.info(f"Usando modello {model_to_use} per generare la scaletta")
            
            # Prepara i messaggi appropriati per il modello
            system_content = "Sei un esperto nella creazione di corsi formativi."
            messages = prepare_messages(model_to_use, system_content, prompt)
            
            # Prepara i parametri API appropriati per il modello
            payload = prepare_api_parameters(model_to_use, messages)
            
            # Log dettagliato dei parametri utilizzati
            logger.info(f"Parametri API per {model_to_use}: "
                      f"supports_system={get_model_config(model_to_use)['supports_system_role']}, "
                      f"max_tokens_param={get_model_config(model_to_use)['max_tokens_param']}, "
                      f"tokens={get_model_config(model_to_use)['default_max_tokens']}")
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API OpenAI dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API OpenAI: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API OpenAI: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API OpenAI: {error_msg}"
                    }
                
                try:
                    # Estrai la scaletta dal messaggio di risposta
                    content = response_data['choices'][0]['message']['content']
                    
                    # Cerca il JSON nella risposta
                    import re
                    json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                    if json_match:
                        json_str = json_match.group(1)
                    else:
                        # Prova a estrarre il JSON senza il formato markdown
                        json_match = re.search(r'({[\s\S]*})', content)
                        if json_match:
                            json_str = json_match.group(1)
                        else:
                            json_str = content
                    
                    # Pulisce il JSON da eventuali commenti o caratteri non validi
                    # Rimuove i commenti con // alla fine delle righe
                    json_str = re.sub(r'//.*$', '', json_str, flags=re.MULTILINE)
                    
                    try:
                        scaletta = json.loads(json_str)
                    except json.JSONDecodeError as e:
                        logger.error(f"Errore nel parsing JSON: {str(e)}")
                        logger.error(f"JSON con errore: {json_str[:200]}...")
                        
                        # Tentativo più aggressivo di pulizia del JSON
                        try:
                            # Rimuove i commenti con //
                            clean_json = re.sub(r'//.*?(\n|$)', '\n', json_str)
                            # Rimuove le virgole trailing prima delle parentesi chiuse
                            clean_json = re.sub(r',\s*}', '}', clean_json)
                            clean_json = re.sub(r',\s*]', ']', clean_json)
                            
                            scaletta = json.loads(clean_json)
                            logger.info("Recupero JSON riuscito dopo pulizia aggressiva")
                        except Exception as inner_e:
                            logger.error(f"Errore nel secondo tentativo di parsing JSON: {str(inner_e)}")
                            return {
                                "success": False,
                                "message": f"Errore nel parsing del JSON: {str(e)}",
                                "content": content
                            }
                    
                    # Verifica che la scaletta contenga i campi minimi necessari
                    if not all(k in scaletta for k in ['titolo', 'descrizione', 'capitoli']):
                        logger.error(f"JSON mancante di campi obbligatori: {scaletta.keys()}")
                        return {
                            "success": False,
                            "message": "La scaletta generata è incompleta o malformata"
                        }
                    
                    return {
                        "success": True,
                        "scaletta": scaletta
                    }
                    
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione della scaletta: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione della scaletta: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione della scaletta: {str(e)}"
            }
            
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera il contenuto di un capitolo specifico usando l'API OpenAI."""
        try:
            logger.info(f"Generazione contenuto capitolo con OpenAI: {capitolo_id}")
            
            # Trova il capitolo da generare
            capitolo = None
            for cap in scaletta['capitoli']:
                if cap['id'] == capitolo_id:
                    capitolo = cap
                    break
            
            if not capitolo:
                return {
                    "success": False,
                    "message": f"Capitolo con ID {capitolo_id} non trovato"
                }
            
            # Costruisci il prompt per la generazione del contenuto
            template_prompt = """
            Sei un assistente esperto nella creazione di contenuti didattici di alta qualità.
            
            Devi generare il contenuto dettagliato per un capitolo di un corso con i seguenti parametri:
            
            CORSO:
            Titolo: {titolo_corso}
            Descrizione: {descrizione_corso}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            CAPITOLO DA GENERARE:
            Titolo: {titolo_capitolo}
            Descrizione: {descrizione_capitolo}
            
            SOTTOARGOMENTI:
            {sottoargomenti}
            
            {contenuto_precedente}
            
            Genera il contenuto completo del capitolo in formato Markdown. 
            Includi un'introduzione generale al capitolo, e poi sviluppa in dettaglio ogni sottoargomento.
            Per ogni sottoargomento, crea una sezione con un titolo di secondo livello (##), seguito da un testo
            esplicativo dettagliato che copra tutti i punti chiave elencati.
            
            Il contenuto deve essere approfondito, accurato ed educativo, mantenendo il livello di complessità e il tono richiesti.
            Includi esempi pratici, analogie dove appropriato, e una conclusione che riassuma i concetti chiave del capitolo.
            """
            
            # Formatta i sottoargomenti
            sottoargomenti_str = ""
            
            # Gestisci sia il vecchio formato (sottoargomenti) che il nuovo (sottocapitoli)
            sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
            
            for i, sotto in enumerate(sotto_items):
                sottoargomenti_str += f"Sottoargomento {i+1}: {sotto['titolo']}\n"
                # Gestisci sia i punti_chiave che descrizioni più generiche
                if 'punti_chiave' in sotto:
                    sottoargomenti_str += "Punti chiave:\n"
                    for punto in sotto['punti_chiave']:
                        sottoargomenti_str += f"- {punto}\n"
                elif 'descrizione' in sotto:
                    sottoargomenti_str += f"Descrizione: {sotto['descrizione']}\n"
                sottoargomenti_str += "\n"
            
            # Formatta eventuali contenuti precedenti
            contenuto_precedente_str = ""
            if contenuto_precedente and len(contenuto_precedente) > 0:
                contenuto_precedente_str = "CONTENUTO DEI CAPITOLI PRECEDENTI (per mantenere la coerenza):\n"
                for prev_cap in contenuto_precedente:
                    contenuto_precedente_str += f"Capitolo: {prev_cap['titolo']}\n"
                    contenuto_precedente_str += f"Riassunto: {prev_cap['riassunto']}\n\n"
            
            # Sostituisci i valori nel template
            requisiti = parametri_corso.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"Requisiti specifici: {requisiti}"
            
            stile_scrittura = parametri_corso.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"\nStile di scrittura: {stile_scrittura}"
            
            prompt = template_prompt.format(
                titolo_corso=parametri_corso['titolo'],
                descrizione_corso=parametri_corso['descrizione'],
                pubblico_target=parametri_corso['pubblico_target'],
                livello_complessita=parametri_corso['livello_complessita'],
                tono=parametri_corso['tono'],
                requisiti_specifici=requisiti,
                titolo_capitolo=capitolo['titolo'],
                descrizione_capitolo=capitolo['descrizione'],
                sottoargomenti=sottoargomenti_str,
                contenuto_precedente=contenuto_precedente_str
            )
            
            # Utilizza il metodo _call_api_with_fallback per gestire automaticamente la selezione del modello
            # e il fallback in caso di errori
            result = await self._call_api_with_fallback(prompt, capitolo_id)
            
            # Se il risultato è un successo, lo restituiamo direttamente
            return result
                
        except Exception as e:
            logger.error(f"Errore durante la generazione del contenuto: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione del contenuto: {str(e)}"
            }

    async def genera_contenuto_espanso(self, corso_id: str, capitolo_id: str, contenuto_originale: str, prompt_espansione: str) -> Dict[str, Any]:
        """
        Genera una versione espansa del contenuto di un capitolo.
        
        Args:
            corso_id: ID del corso
            capitolo_id: ID del capitolo
            contenuto_originale: Contenuto originale da espandere
            prompt_espansione: Prompt con le istruzioni per l'espansione
            
        Returns:
            Dizionario con il risultato dell'operazione
        """
        logger.info(f"Generazione contenuto espanso per capitolo {capitolo_id} del corso {corso_id}")
        
        # Verifica la validità della chiave API
        verifica_risultato = await self.verifica_chiave_api()
        if not verifica_risultato["success"]:
            logger.error(f"Impossibile procedere con l'espansione: {verifica_risultato['message']}")
            return {
                "success": False,
                "message": f"Impossibile procedere con l'espansione: {verifica_risultato['message']}"
            }
        
        # Verifica la lunghezza del contenuto originale
        num_token_originale = self._stima_token(contenuto_originale)
        logger.info(f"Lunghezza stimata del contenuto originale: {num_token_originale} token")
        
        # Seleziona il modello appropriato
        modello = self._seleziona_modello_per_espansione()
        logger.info(f"Utilizzo del modello {modello} per l'espansione del contenuto")
        
        # Ottieni i limiti di token per il modello selezionato
        modelli_info = {
            "o1-preview": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "o1": {
                "max_input_tokens": 32768,
                "max_output_tokens": 4096
            },
            "gpt-4o": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4-turbo": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4": {
                "max_input_tokens": 8192,
                "max_output_tokens": 4096
            }
        }
        
        # Imposta i limiti di token in base al modello
        limite_input_token = modelli_info.get(modello, {}).get("max_input_tokens", 4000)
        limite_output_token = modelli_info.get(modello, {}).get("max_output_tokens", 4000)
        
        logger.info(f"Limiti di token per il modello {modello}: input={limite_input_token}, output={limite_output_token}")
        
        # Verifica se il contenuto è troppo lungo per essere elaborato in una singola richiesta
        # Consideriamo un limite di sicurezza per lasciare spazio al prompt e alla risposta
        limite_token_sicuro = limite_input_token - 1000  # Riserviamo 1000 token per il prompt
        
        if num_token_originale > limite_token_sicuro:
            logger.warning(f"Contenuto troppo lungo ({num_token_originale} token) per una singola richiesta. Verrà troncato.")
            # Tronca il contenuto originale per rientrare nel limite
            contenuto_originale = self._tronca_testo_per_token(contenuto_originale, limite_token_sicuro)
            logger.info(f"Contenuto troncato a circa {limite_token_sicuro} token")
        
        # Prepara il messaggio per l'API
        messages = []
        
        # Adatta il formato dei messaggi in base al modello
        if modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1"):
            # Per modelli che non supportano 'system', includiamo le istruzioni nel messaggio utente
            system_instruction = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate.\n\n"
            messages = [
                {"role": "user", "content": system_instruction + prompt_espansione}
            ]
            logger.info(f"Usando formato semplificato dei messaggi per il modello {modello}")
        else:
            # Per modelli che supportano 'system', usiamo il formato standard
            messages = [
                {"role": "system", "content": "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."},
                {"role": "user", "content": prompt_espansione}
            ]
        
        # Verifica il formato dei messaggi
        if not self._verifica_formato_messaggi(messages):
            logger.error(f"Formato dei messaggi non valido per l'espansione del capitolo {capitolo_id}")
            return {
                "success": False,
                "message": "Errore nel formato dei messaggi per l'API. Controlla i log per maggiori dettagli."
            }
        
        # Verifica esplicita dell'accesso al modello selezionato
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "Authorization": f"Bearer {self.api_key}"
                }
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers
                )
                
                if response.status_code == 200:
                    modelli_data = response.json()
                    modelli_disponibili = [model["id"] for model in modelli_data.get("data", [])]
                    
                    # Verifica se il modello selezionato è disponibile
                    if not any(m == modello or m.startswith(f"{modello}-") for m in modelli_disponibili):
                        logger.warning(f"Il modello {modello} non è disponibile. Modelli disponibili: {', '.join(modelli_disponibili[:10])}...")
                        
                        # Cerca un modello alternativo di alta qualità
                        modelli_alta_qualita = ["o1-preview", "o1", "gpt-4o", "gpt-4-turbo"]
                        for m_prefix in modelli_alta_qualita:
                            alternative = [m for m in modelli_disponibili if m.startswith(m_prefix)]
                            if alternative:
                                modello = alternative[0]
                                logger.info(f"Utilizzo del modello alternativo {modello} per l'espansione")
                                
                                # Aggiorna il formato dei messaggi in base al nuovo modello selezionato
                                if (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) > 1:
                                    # Converti da formato con system a formato senza system
                                    system_content = messages[0]["content"]
                                    user_content = messages[1]["content"]
                                    messages = [
                                        {"role": "user", "content": system_content + "\n\n" + user_content}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                elif not (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) == 1:
                                    # Converti da formato senza system a formato con system
                                    combined_content = messages[0]["content"]
                                    # Estrai la parte system e user
                                    system_part = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."
                                    user_part = combined_content.replace(system_part + "\n\n", "")
                                    messages = [
                                        {"role": "system", "content": system_part},
                                        {"role": "user", "content": user_part}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                
                                break
                        else:
                            logger.error("Nessun modello di alta qualità disponibile")
                            return {
                                "success": False,
                                "message": f"Nessun modello di alta qualità disponibile. Aggiorna il tuo account OpenAI per accedere ai modelli necessari."
                            }
        except Exception as e:
            logger.warning(f"Impossibile verificare l'accesso al modello {modello}: {str(e)}. Procedo comunque con la richiesta.")
        
        # Parametri per la chiamata API basati sul modello specifico
        # Definizione delle configurazioni predefinite per ogni modello
        model_configs = {
            "o1-preview": {
                "supported_params": ["model", "messages", "max_completion_tokens", "response_format"],
                "default_values": {
                    "response_format": {"type": "text"}
                },
                "param_mapping": {
                    "max_tokens": "max_completion_tokens"
                }
            },
            "o1-mini": {
                "supported_params": ["model", "messages", "max_completion_tokens", "response_format", "frequency_penalty", "presence_penalty"],
                "default_values": {
                    "response_format": {"type": "text"},
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5
                },
                "param_mapping": {
                    "max_tokens": "max_completion_tokens"
                }
            },
            "o1": {
                "supported_params": ["model", "messages", "max_tokens", "response_format", "frequency_penalty", "presence_penalty", "temperature", "top_p"],
                "default_values": {
                    "response_format": {"type": "text"},
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5
                },
                "param_mapping": {}
            },
            "gpt-4o": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            },
            "gpt-4-turbo": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            },
            "gpt-4": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            }
        }
        
        # Parametri di base
        base_params = {
            "model": modello,
            "messages": messages,
            "max_tokens": limite_output_token
        }
        
        # Seleziona la configurazione per il modello corrente
        model_prefix = next((prefix for prefix in model_configs.keys() if modello.startswith(prefix)), "gpt-4")
        config = model_configs.get(model_prefix, model_configs["gpt-4"])
        
        logger.info(f"Utilizzando configurazione per il modello {model_prefix}")
        
        # Crea i parametri finali
        params = {}
        
        # Aggiungi i parametri di base supportati
        for param, value in base_params.items():
            # Se il parametro ha un mapping, usa il nome mappato
            mapped_param = config["param_mapping"].get(param, param)
            if mapped_param in config["supported_params"]:
                params[mapped_param] = value
                logger.debug(f"Parametro aggiunto: {mapped_param}")
        
        # Aggiungi i valori predefiniti per i parametri supportati
        for param, value in config["default_values"].items():
            if param in config["supported_params"] and param not in params:
                params[param] = value
                logger.debug(f"Parametro predefinito aggiunto: {param}")
        
        logger.info(f"Parametri finali per il modello {modello}: {', '.join(params.keys())}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "temperature" in params:
            logger.info(f"Aggiunto parametro 'temperature' per il modello {modello}")
        if "top_p" in params:
            logger.info(f"Aggiunto parametro 'top_p' per il modello {modello}")
        if "frequency_penalty" in params:
            logger.info(f"Aggiunto parametro 'frequency_penalty' per il modello {modello}")
        if "presence_penalty" in params:
            logger.info(f"Aggiunto parametro 'presence_penalty' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "max_tokens" in params:
            logger.info(f"Aggiunto parametro 'max_tokens' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "max_completion_tokens" in params:
            logger.info(f"Aggiunto parametro 'max_completion_tokens' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "response_format" in params:
            logger.info(f"Aggiunto parametro 'response_format' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
            
            prompt = template_prompt.format(
                titolo=parametri['titolo'],
                descrizione=parametri['descrizione'],
                pubblico_target=parametri['pubblico_target'],
                livello_complessita=parametri['livello_complessita'],
                tono=parametri['tono'],
                requisiti_specifici=requisiti,
                profondita=profondita,
                num_capitoli=num_capitoli,
                num_sottocapitoli=num_sottocapitoli
            )
        
            # Usa uno dei modelli disponibili dal nostro sistema di fallback
            model_to_use = self.fallback_models[0] if self.fallback_models else self.model
            logger.info(f"Usando modello {model_to_use} per generare la scaletta")
            
            # Prepara i messaggi appropriati per il modello
            system_content = "Sei un esperto nella creazione di corsi formativi."
            messages = prepare_messages(model_to_use, system_content, prompt)
            
            # Prepara i parametri API appropriati per il modello
            payload = prepare_api_parameters(model_to_use, messages)
            
            # Log dettagliato dei parametri utilizzati
            logger.info(f"Parametri API per {model_to_use}: "
                      f"supports_system={get_model_config(model_to_use)['supports_system_role']}, "
                      f"max_tokens_param={get_model_config(model_to_use)['max_tokens_param']}, "
                      f"tokens={get_model_config(model_to_use)['default_max_tokens']}")
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API OpenAI dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API OpenAI: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API OpenAI: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API OpenAI: {error_msg}"
                    }
                
                try:
                    # Estrai la scaletta dal messaggio di risposta
                    content = response_data['choices'][0]['message']['content']
                    
                    # Cerca il JSON nella risposta
                    import re
                    json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                    if json_match:
                        json_str = json_match.group(1)
                    else:
                        # Prova a estrarre il JSON senza il formato markdown
                        json_match = re.search(r'({[\s\S]*})', content)
                        if json_match:
                            json_str = json_match.group(1)
                        else:
                            json_str = content
                    
                    # Pulisce il JSON da eventuali commenti o caratteri non validi
                    # Rimuove i commenti con // alla fine delle righe
                    json_str = re.sub(r'//.*$', '', json_str, flags=re.MULTILINE)
                    
                    try:
                        scaletta = json.loads(json_str)
                    except json.JSONDecodeError as e:
                        logger.error(f"Errore nel parsing JSON: {str(e)}")
                        logger.error(f"JSON con errore: {json_str[:200]}...")
                        
                        # Tentativo più aggressivo di pulizia del JSON
                        try:
                            # Rimuove i commenti con //
                            clean_json = re.sub(r'//.*?(\n|$)', '\n', json_str)
                            # Rimuove le virgole trailing prima delle parentesi chiuse
                            clean_json = re.sub(r',\s*}', '}', clean_json)
                            clean_json = re.sub(r',\s*]', ']', clean_json)
                            
                            scaletta = json.loads(clean_json)
                            logger.info("Recupero JSON riuscito dopo pulizia aggressiva")
                        except Exception as inner_e:
                            logger.error(f"Errore nel secondo tentativo di parsing JSON: {str(inner_e)}")
                            return {
                                "success": False,
                                "message": f"Errore nel parsing del JSON: {str(e)}",
                                "content": content
                            }
                    
                    # Verifica che la scaletta contenga i campi minimi necessari
                    if not all(k in scaletta for k in ['titolo', 'descrizione', 'capitoli']):
                        logger.error(f"JSON mancante di campi obbligatori: {scaletta.keys()}")
                        return {
                            "success": False,
                            "message": "La scaletta generata è incompleta o malformata"
                        }
                    
                    return {
                        "success": True,
                        "scaletta": scaletta
                    }
                    
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione della scaletta: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione della scaletta: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione della scaletta: {str(e)}"
            }
            
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera il contenuto di un capitolo specifico usando l'API OpenAI."""
        try:
            logger.info(f"Generazione contenuto capitolo con OpenAI: {capitolo_id}")
            
            # Trova il capitolo da generare
            capitolo = None
            for cap in scaletta['capitoli']:
                if cap['id'] == capitolo_id:
                    capitolo = cap
                    break
            
            if not capitolo:
                return {
                    "success": False,
                    "message": f"Capitolo con ID {capitolo_id} non trovato"
                }
            
            # Costruisci il prompt per la generazione del contenuto
            template_prompt = """
            Sei un assistente esperto nella creazione di contenuti didattici di alta qualità.
            
            Devi generare il contenuto dettagliato per un capitolo di un corso con i seguenti parametri:
            
            CORSO:
            Titolo: {titolo_corso}
            Descrizione: {descrizione_corso}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            CAPITOLO DA GENERARE:
            Titolo: {titolo_capitolo}
            Descrizione: {descrizione_capitolo}
            
            SOTTOARGOMENTI:
            {sottoargomenti}
            
            {contenuto_precedente}
            
            Genera il contenuto completo del capitolo in formato Markdown. 
            Includi un'introduzione generale al capitolo, e poi sviluppa in dettaglio ogni sottoargomento.
            Per ogni sottoargomento, crea una sezione con un titolo di secondo livello (##), seguito da un testo
            esplicativo dettagliato che copra tutti i punti chiave elencati.
            
            Il contenuto deve essere approfondito, accurato ed educativo, mantenendo il livello di complessità e il tono richiesti.
            Includi esempi pratici, analogie dove appropriato, e una conclusione che riassuma i concetti chiave del capitolo.
            """
            
            # Formatta i sottoargomenti
            sottoargomenti_str = ""
            
            # Gestisci sia il vecchio formato (sottoargomenti) che il nuovo (sottocapitoli)
            sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
            
            for i, sotto in enumerate(sotto_items):
                sottoargomenti_str += f"Sottoargomento {i+1}: {sotto['titolo']}\n"
                # Gestisci sia i punti_chiave che descrizioni più generiche
                if 'punti_chiave' in sotto:
                    sottoargomenti_str += "Punti chiave:\n"
                    for punto in sotto['punti_chiave']:
                        sottoargomenti_str += f"- {punto}\n"
                elif 'descrizione' in sotto:
                    sottoargomenti_str += f"Descrizione: {sotto['descrizione']}\n"
                sottoargomenti_str += "\n"
            
            # Formatta eventuali contenuti precedenti
            contenuto_precedente_str = ""
            if contenuto_precedente and len(contenuto_precedente) > 0:
                contenuto_precedente_str = "CONTENUTO DEI CAPITOLI PRECEDENTI (per mantenere la coerenza):\n"
                for prev_cap in contenuto_precedente:
                    contenuto_precedente_str += f"Capitolo: {prev_cap['titolo']}\n"
                    contenuto_precedente_str += f"Riassunto: {prev_cap['riassunto']}\n\n"
            
            # Sostituisci i valori nel template
            requisiti = parametri_corso.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"Requisiti specifici: {requisiti}"
            
            stile_scrittura = parametri_corso.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"\nStile di scrittura: {stile_scrittura}"
            
            prompt = template_prompt.format(
                titolo_corso=parametri_corso['titolo'],
                descrizione_corso=parametri_corso['descrizione'],
                pubblico_target=parametri_corso['pubblico_target'],
                livello_complessita=parametri_corso['livello_complessita'],
                tono=parametri_corso['tono'],
                requisiti_specifici=requisiti,
                titolo_capitolo=capitolo['titolo'],
                descrizione_capitolo=capitolo['descrizione'],
                sottoargomenti=sottoargomenti_str,
                contenuto_precedente=contenuto_precedente_str
            )
            
            # Utilizza il metodo _call_api_with_fallback per gestire automaticamente la selezione del modello
            # e il fallback in caso di errori
            result = await self._call_api_with_fallback(prompt, capitolo_id)
            
            # Se il risultato è un successo, lo restituiamo direttamente
            return result
                
        except Exception as e:
            logger.error(f"Errore durante la generazione del contenuto: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione del contenuto: {str(e)}"
            }

    async def genera_contenuto_espanso(self, corso_id: str, capitolo_id: str, contenuto_originale: str, prompt_espansione: str) -> Dict[str, Any]:
        """
        Genera una versione espansa del contenuto di un capitolo.
        
        Args:
            corso_id: ID del corso
            capitolo_id: ID del capitolo
            contenuto_originale: Contenuto originale da espandere
            prompt_espansione: Prompt con le istruzioni per l'espansione
            
        Returns:
            Dizionario con il risultato dell'operazione
        """
        logger.info(f"Generazione contenuto espanso per capitolo {capitolo_id} del corso {corso_id}")
        
        # Verifica la validità della chiave API
        verifica_risultato = await self.verifica_chiave_api()
        if not verifica_risultato["success"]:
            logger.error(f"Impossibile procedere con l'espansione: {verifica_risultato['message']}")
            return {
                "success": False,
                "message": f"Impossibile procedere con l'espansione: {verifica_risultato['message']}"
            }
        
        # Verifica la lunghezza del contenuto originale
        num_token_originale = self._stima_token(contenuto_originale)
        logger.info(f"Lunghezza stimata del contenuto originale: {num_token_originale} token")
        
        # Seleziona il modello appropriato
        modello = self._seleziona_modello_per_espansione()
        logger.info(f"Utilizzo del modello {modello} per l'espansione del contenuto")
        
        # Ottieni i limiti di token per il modello selezionato
        modelli_info = {
            "o1-preview": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "o1": {
                "max_input_tokens": 32768,
                "max_output_tokens": 4096
            },
            "gpt-4o": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4-turbo": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4": {
                "max_input_tokens": 8192,
                "max_output_tokens": 4096
            }
        }
        
        # Imposta i limiti di token in base al modello
        limite_input_token = modelli_info.get(modello, {}).get("max_input_tokens", 4000)
        limite_output_token = modelli_info.get(modello, {}).get("max_output_tokens", 4000)
        
        logger.info(f"Limiti di token per il modello {modello}: input={limite_input_token}, output={limite_output_token}")
        
        # Verifica se il contenuto è troppo lungo per essere elaborato in una singola richiesta
        # Consideriamo un limite di sicurezza per lasciare spazio al prompt e alla risposta
        limite_token_sicuro = limite_input_token - 1000  # Riserviamo 1000 token per il prompt
        
        if num_token_originale > limite_token_sicuro:
            logger.warning(f"Contenuto troppo lungo ({num_token_originale} token) per una singola richiesta. Verrà troncato.")
            # Tronca il contenuto originale per rientrare nel limite
            contenuto_originale = self._tronca_testo_per_token(contenuto_originale, limite_token_sicuro)
            logger.info(f"Contenuto troncato a circa {limite_token_sicuro} token")
        
        # Prepara il messaggio per l'API
        messages = []
        
        # Adatta il formato dei messaggi in base al modello
        if modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1"):
            # Per modelli che non supportano 'system', includiamo le istruzioni nel messaggio utente
            system_instruction = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate.\n\n"
            messages = [
                {"role": "user", "content": system_instruction + prompt_espansione}
            ]
            logger.info(f"Usando formato semplificato dei messaggi per il modello {modello}")
        else:
            # Per modelli che supportano 'system', usiamo il formato standard
            messages = [
                {"role": "system", "content": "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."},
                {"role": "user", "content": prompt_espansione}
            ]
        
        # Verifica il formato dei messaggi
        if not self._verifica_formato_messaggi(messages):
            logger.error(f"Formato dei messaggi non valido per l'espansione del capitolo {capitolo_id}")
            return {
                "success": False,
                "message": "Errore nel formato dei messaggi per l'API. Controlla i log per maggiori dettagli."
            }
        
        # Verifica esplicita dell'accesso al modello selezionato
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "Authorization": f"Bearer {self.api_key}"
                }
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers
                )
                
                if response.status_code == 200:
                    modelli_data = response.json()
                    modelli_disponibili = [model["id"] for model in modelli_data.get("data", [])]
                    
                    # Verifica se il modello selezionato è disponibile
                    if not any(m == modello or m.startswith(f"{modello}-") for m in modelli_disponibili):
                        logger.warning(f"Il modello {modello} non è disponibile. Modelli disponibili: {', '.join(modelli_disponibili[:10])}...")
                        
                        # Cerca un modello alternativo di alta qualità
                        modelli_alta_qualita = ["o1-preview", "o1", "gpt-4o", "gpt-4-turbo"]
                        for m_prefix in modelli_alta_qualita:
                            alternative = [m for m in modelli_disponibili if m.startswith(m_prefix)]
                            if alternative:
                                modello = alternative[0]
                                logger.info(f"Utilizzo del modello alternativo {modello} per l'espansione")
                                
                                # Aggiorna il formato dei messaggi in base al nuovo modello selezionato
                                if (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) > 1:
                                    # Converti da formato con system a formato senza system
                                    system_content = messages[0]["content"]
                                    user_content = messages[1]["content"]
                                    messages = [
                                        {"role": "user", "content": system_content + "\n\n" + user_content}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                elif not (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) == 1:
                                    # Converti da formato senza system a formato con system
                                    combined_content = messages[0]["content"]
                                    # Estrai la parte system e user
                                    system_part = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."
                                    user_part = combined_content.replace(system_part + "\n\n", "")
                                    messages = [
                                        {"role": "system", "content": system_part},
                                        {"role": "user", "content": user_part}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                
                                break
                        else:
                            logger.error("Nessun modello di alta qualità disponibile")
                            return {
                                "success": False,
                                "message": f"Nessun modello di alta qualità disponibile. Aggiorna il tuo account OpenAI per accedere ai modelli necessari."
                            }
        except Exception as e:
            logger.warning(f"Impossibile verificare l'accesso al modello {modello}: {str(e)}. Procedo comunque con la richiesta.")
        
        # Parametri per la chiamata API basati sul modello specifico
        # Definizione delle configurazioni predefinite per ogni modello
        model_configs = {
            "o1-preview": {
                "supported_params": ["model", "messages", "max_completion_tokens", "response_format"],
                "default_values": {
                    "response_format": {"type": "text"}
                },
                "param_mapping": {
                    "max_tokens": "max_completion_tokens"
                }
            },
            "o1-mini": {
                "supported_params": ["model", "messages", "max_completion_tokens", "response_format", "frequency_penalty", "presence_penalty"],
                "default_values": {
                    "response_format": {"type": "text"},
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5
                },
                "param_mapping": {
                    "max_tokens": "max_completion_tokens"
                }
            },
            "o1": {
                "supported_params": ["model", "messages", "max_tokens", "response_format", "frequency_penalty", "presence_penalty", "temperature", "top_p"],
                "default_values": {
                    "response_format": {"type": "text"},
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5
                },
                "param_mapping": {}
            },
            "gpt-4o": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            },
            "gpt-4-turbo": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            },
            "gpt-4": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            }
        }
        
        # Parametri di base
        base_params = {
            "model": modello,
            "messages": messages,
            "max_tokens": limite_output_token
        }
        
        # Seleziona la configurazione per il modello corrente
        model_prefix = next((prefix for prefix in model_configs.keys() if modello.startswith(prefix)), "gpt-4")
        config = model_configs.get(model_prefix, model_configs["gpt-4"])
        
        logger.info(f"Utilizzando configurazione per il modello {model_prefix}")
        
        # Crea i parametri finali
        params = {}
        
        # Aggiungi i parametri di base supportati
        for param, value in base_params.items():
            # Se il parametro ha un mapping, usa il nome mappato
            mapped_param = config["param_mapping"].get(param, param)
            if mapped_param in config["supported_params"]:
                params[mapped_param] = value
                logger.debug(f"Parametro aggiunto: {mapped_param}")
        
        # Aggiungi i valori predefiniti per i parametri supportati
        for param, value in config["default_values"].items():
            if param in config["supported_params"] and param not in params:
                params[param] = value
                logger.debug(f"Parametro predefinito aggiunto: {param}")
        
        logger.info(f"Parametri finali per il modello {modello}: {', '.join(params.keys())}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "temperature" in params:
            logger.info(f"Aggiunto parametro 'temperature' per il modello {modello}")
        if "top_p" in params:
            logger.info(f"Aggiunto parametro 'top_p' per il modello {modello}")
        if "frequency_penalty" in params:
            logger.info(f"Aggiunto parametro 'frequency_penalty' per il modello {modello}")
        if "presence_penalty" in params:
            logger.info(f"Aggiunto parametro 'presence_penalty' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "max_tokens" in params:
            logger.info(f"Aggiunto parametro 'max_tokens' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "max_completion_tokens" in params:
            logger.info(f"Aggiunto parametro 'max_completion_tokens' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "response_format" in params:
            logger.info(f"Aggiunto parametro 'response_format' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
            
            prompt = template_prompt.format(
                titolo=parametri['titolo'],
                descrizione=parametri['descrizione'],
                pubblico_target=parametri['pubblico_target'],
                livello_complessita=parametri['livello_complessita'],
                tono=parametri['tono'],
                requisiti_specifici=requisiti,
                profondita=profondita,
                num_capitoli=num_capitoli,
                num_sottocapitoli=num_sottocapitoli
            )
        
            # Usa uno dei modelli disponibili dal nostro sistema di fallback
            model_to_use = self.fallback_models[0] if self.fallback_models else self.model
            logger.info(f"Usando modello {model_to_use} per generare la scaletta")
            
            # Prepara i messaggi appropriati per il modello
            system_content = "Sei un esperto nella creazione di corsi formativi."
            messages = prepare_messages(model_to_use, system_content, prompt)
            
            # Prepara i parametri API appropriati per il modello
            payload = prepare_api_parameters(model_to_use, messages)
            
            # Log dettagliato dei parametri utilizzati
            logger.info(f"Parametri API per {model_to_use}: "
                      f"supports_system={get_model_config(model_to_use)['supports_system_role']}, "
                      f"max_tokens_param={get_model_config(model_to_use)['max_tokens_param']}, "
                      f"tokens={get_model_config(model_to_use)['default_max_tokens']}")
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API OpenAI dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API OpenAI: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API OpenAI: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API OpenAI: {error_msg}"
                    }
                
                try:
                    # Estrai la scaletta dal messaggio di risposta
                    content = response_data['choices'][0]['message']['content']
                    
                    # Cerca il JSON nella risposta
                    import re
                    json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                    if json_match:
                        json_str = json_match.group(1)
                    else:
                        # Prova a estrarre il JSON senza il formato markdown
                        json_match = re.search(r'({[\s\S]*})', content)
                        if json_match:
                            json_str = json_match.group(1)
                        else:
                            json_str = content
                    
                    # Pulisce il JSON da eventuali commenti o caratteri non validi
                    # Rimuove i commenti con // alla fine delle righe
                    json_str = re.sub(r'//.*$', '', json_str, flags=re.MULTILINE)
                    
                    try:
                        scaletta = json.loads(json_str)
                    except json.JSONDecodeError as e:
                        logger.error(f"Errore nel parsing JSON: {str(e)}")
                        logger.error(f"JSON con errore: {json_str[:200]}...")
                        
                        # Tentativo più aggressivo di pulizia del JSON
                        try:
                            # Rimuove i commenti con //
                            clean_json = re.sub(r'//.*?(\n|$)', '\n', json_str)
                            # Rimuove le virgole trailing prima delle parentesi chiuse
                            clean_json = re.sub(r',\s*}', '}', clean_json)
                            clean_json = re.sub(r',\s*]', ']', clean_json)
                            
                            scaletta = json.loads(clean_json)
                            logger.info("Recupero JSON riuscito dopo pulizia aggressiva")
                        except Exception as inner_e:
                            logger.error(f"Errore nel secondo tentativo di parsing JSON: {str(inner_e)}")
                            return {
                                "success": False,
                                "message": f"Errore nel parsing del JSON: {str(e)}",
                                "content": content
                            }
                    
                    # Verifica che la scaletta contenga i campi minimi necessari
                    if not all(k in scaletta for k in ['titolo', 'descrizione', 'capitoli']):
                        logger.error(f"JSON mancante di campi obbligatori: {scaletta.keys()}")
                        return {
                            "success": False,
                            "message": "La scaletta generata è incompleta o malformata"
                        }
                    
                    return {
                        "success": True,
                        "scaletta": scaletta
                    }
                    
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione della scaletta: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione della scaletta: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione della scaletta: {str(e)}"
            }
            
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera il contenuto di un capitolo specifico usando l'API OpenAI."""
        try:
            logger.info(f"Generazione contenuto capitolo con OpenAI: {capitolo_id}")
            
            # Trova il capitolo da generare
            capitolo = None
            for cap in scaletta['capitoli']:
                if cap['id'] == capitolo_id:
                    capitolo = cap
                    break
            
            if not capitolo:
                return {
                    "success": False,
                    "message": f"Capitolo con ID {capitolo_id} non trovato"
                }
            
            # Costruisci il prompt per la generazione del contenuto
            template_prompt = """
            Sei un assistente esperto nella creazione di contenuti didattici di alta qualità.
            
            Devi generare il contenuto dettagliato per un capitolo di un corso con i seguenti parametri:
            
            CORSO:
            Titolo: {titolo_corso}
            Descrizione: {descrizione_corso}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            CAPITOLO DA GENERARE:
            Titolo: {titolo_capitolo}
            Descrizione: {descrizione_capitolo}
            
            SOTTOARGOMENTI:
            {sottoargomenti}
            
            {contenuto_precedente}
            
            Genera il contenuto completo del capitolo in formato Markdown. 
            Includi un'introduzione generale al capitolo, e poi sviluppa in dettaglio ogni sottoargomento.
            Per ogni sottoargomento, crea una sezione con un titolo di secondo livello (##), seguito da un testo
            esplicativo dettagliato che copra tutti i punti chiave elencati.
            
            Il contenuto deve essere approfondito, accurato ed educativo, mantenendo il livello di complessità e il tono richiesti.
            Includi esempi pratici, analogie dove appropriato, e una conclusione che riassuma i concetti chiave del capitolo.
            """
            
            # Formatta i sottoargomenti
            sottoargomenti_str = ""
            
            # Gestisci sia il vecchio formato (sottoargomenti) che il nuovo (sottocapitoli)
            sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
            
            for i, sotto in enumerate(sotto_items):
                sottoargomenti_str += f"Sottoargomento {i+1}: {sotto['titolo']}\n"
                # Gestisci sia i punti_chiave che descrizioni più generiche
                if 'punti_chiave' in sotto:
                    sottoargomenti_str += "Punti chiave:\n"
                    for punto in sotto['punti_chiave']:
                        sottoargomenti_str += f"- {punto}\n"
                elif 'descrizione' in sotto:
                    sottoargomenti_str += f"Descrizione: {sotto['descrizione']}\n"
                sottoargomenti_str += "\n"
            
            # Formatta eventuali contenuti precedenti
            contenuto_precedente_str = ""
            if contenuto_precedente and len(contenuto_precedente) > 0:
                contenuto_precedente_str = "CONTENUTO DEI CAPITOLI PRECEDENTI (per mantenere la coerenza):\n"
                for prev_cap in contenuto_precedente:
                    contenuto_precedente_str += f"Capitolo: {prev_cap['titolo']}\n"
                    contenuto_precedente_str += f"Riassunto: {prev_cap['riassunto']}\n\n"
            
            # Sostituisci i valori nel template
            requisiti = parametri_corso.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"Requisiti specifici: {requisiti}"
            
            stile_scrittura = parametri_corso.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"\nStile di scrittura: {stile_scrittura}"
            
            prompt = template_prompt.format(
                titolo_corso=parametri_corso['titolo'],
                descrizione_corso=parametri_corso['descrizione'],
                pubblico_target=parametri_corso['pubblico_target'],
                livello_complessita=parametri_corso['livello_complessita'],
                tono=parametri_corso['tono'],
                requisiti_specifici=requisiti,
                titolo_capitolo=capitolo['titolo'],
                descrizione_capitolo=capitolo['descrizione'],
                sottoargomenti=sottoargomenti_str,
                contenuto_precedente=contenuto_precedente_str
            )
            
            # Utilizza il metodo _call_api_with_fallback per gestire automaticamente la selezione del modello
            # e il fallback in caso di errori
            result = await self._call_api_with_fallback(prompt, capitolo_id)
            
            # Se il risultato è un successo, lo restituiamo direttamente
            return result
                
        except Exception as e:
            logger.error(f"Errore durante la generazione del contenuto: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione del contenuto: {str(e)}"
            }

    async def genera_contenuto_espanso(self, corso_id: str, capitolo_id: str, contenuto_originale: str, prompt_espansione: str) -> Dict[str, Any]:
        """
        Genera una versione espansa del contenuto di un capitolo.
        
        Args:
            corso_id: ID del corso
            capitolo_id: ID del capitolo
            contenuto_originale: Contenuto originale da espandere
            prompt_espansione: Prompt con le istruzioni per l'espansione
            
        Returns:
            Dizionario con il risultato dell'operazione
        """
        logger.info(f"Generazione contenuto espanso per capitolo {capitolo_id} del corso {corso_id}")
        
        # Verifica la validità della chiave API
        verifica_risultato = await self.verifica_chiave_api()
        if not verifica_risultato["success"]:
            logger.error(f"Impossibile procedere con l'espansione: {verifica_risultato['message']}")
            return {
                "success": False,
                "message": f"Impossibile procedere con l'espansione: {verifica_risultato['message']}"
            }
        
        # Verifica la lunghezza del contenuto originale
        num_token_originale = self._stima_token(contenuto_originale)
        logger.info(f"Lunghezza stimata del contenuto originale: {num_token_originale} token")
        
        # Seleziona il modello appropriato
        modello = self._seleziona_modello_per_espansione()
        logger.info(f"Utilizzo del modello {modello} per l'espansione del contenuto")
        
        # Ottieni i limiti di token per il modello selezionato
        modelli_info = {
            "o1-preview": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "o1": {
                "max_input_tokens": 32768,
                "max_output_tokens": 4096
            },
            "gpt-4o": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4-turbo": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4": {
                "max_input_tokens": 8192,
                "max_output_tokens": 4096
            }
        }
        
        # Imposta i limiti di token in base al modello
        limite_input_token = modelli_info.get(modello, {}).get("max_input_tokens", 4000)
        limite_output_token = modelli_info.get(modello, {}).get("max_output_tokens", 4000)
        
        logger.info(f"Limiti di token per il modello {modello}: input={limite_input_token}, output={limite_output_token}")
        
        # Verifica se il contenuto è troppo lungo per essere elaborato in una singola richiesta
        # Consideriamo un limite di sicurezza per lasciare spazio al prompt e alla risposta
        limite_token_sicuro = limite_input_token - 1000  # Riserviamo 1000 token per il prompt
        
        if num_token_originale > limite_token_sicuro:
            logger.warning(f"Contenuto troppo lungo ({num_token_originale} token) per una singola richiesta. Verrà troncato.")
            # Tronca il contenuto originale per rientrare nel limite
            contenuto_originale = self._tronca_testo_per_token(contenuto_originale, limite_token_sicuro)
            logger.info(f"Contenuto troncato a circa {limite_token_sicuro} token")
        
        # Prepara il messaggio per l'API
        messages = []
        
        # Adatta il formato dei messaggi in base al modello
        if modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1"):
            # Per modelli che non supportano 'system', includiamo le istruzioni nel messaggio utente
            system_instruction = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate.\n\n"
            messages = [
                {"role": "user", "content": system_instruction + prompt_espansione}
            ]
            logger.info(f"Usando formato semplificato dei messaggi per il modello {modello}")
        else:
            # Per modelli che supportano 'system', usiamo il formato standard
            messages = [
                {"role": "system", "content": "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."},
                {"role": "user", "content": prompt_espansione}
            ]
        
        # Verifica il formato dei messaggi
        if not self._verifica_formato_messaggi(messages):
            logger.error(f"Formato dei messaggi non valido per l'espansione del capitolo {capitolo_id}")
            return {
                "success": False,
                "message": "Errore nel formato dei messaggi per l'API. Controlla i log per maggiori dettagli."
            }
        
        # Verifica esplicita dell'accesso al modello selezionato
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "Authorization": f"Bearer {self.api_key}"
                }
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers
                )
                
                if response.status_code == 200:
                    modelli_data = response.json()
                    modelli_disponibili = [model["id"] for model in modelli_data.get("data", [])]
                    
                    # Verifica se il modello selezionato è disponibile
                    if not any(m == modello or m.startswith(f"{modello}-") for m in modelli_disponibili):
                        logger.warning(f"Il modello {modello} non è disponibile. Modelli disponibili: {', '.join(modelli_disponibili[:10])}...")
                        
                        # Cerca un modello alternativo di alta qualità
                        modelli_alta_qualita = ["o1-preview", "o1", "gpt-4o", "gpt-4-turbo"]
                        for m_prefix in modelli_alta_qualita:
                            alternative = [m for m in modelli_disponibili if m.startswith(m_prefix)]
                            if alternative:
                                modello = alternative[0]
                                logger.info(f"Utilizzo del modello alternativo {modello} per l'espansione")
                                
                                # Aggiorna il formato dei messaggi in base al nuovo modello selezionato
                                if (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) > 1:
                                    # Converti da formato con system a formato senza system
                                    system_content = messages[0]["content"]
                                    user_content = messages[1]["content"]
                                    messages = [
                                        {"role": "user", "content": system_content + "\n\n" + user_content}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                elif not (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) == 1:
                                    # Converti da formato senza system a formato con system
                                    combined_content = messages[0]["content"]
                                    # Estrai la parte system e user
                                    system_part = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."
                                    user_part = combined_content.replace(system_part + "\n\n", "")
                                    messages = [
                                        {"role": "system", "content": system_part},
                                        {"role": "user", "content": user_part}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                
                                break
                        else:
                            logger.error("Nessun modello di alta qualità disponibile")
                            return {
                                "success": False,
                                "message": f"Nessun modello di alta qualità disponibile. Aggiorna il tuo account OpenAI per accedere ai modelli necessari."
                            }
        except Exception as e:
            logger.warning(f"Impossibile verificare l'accesso al modello {modello}: {str(e)}. Procedo comunque con la richiesta.")
        
        # Parametri per la chiamata API basati sul modello specifico
        # Definizione delle configurazioni predefinite per ogni modello
        model_configs = {
            "o1-preview": {
                "supported_params": ["model", "messages", "max_completion_tokens", "response_format"],
                "default_values": {
                    "response_format": {"type": "text"}
                },
                "param_mapping": {
                    "max_tokens": "max_completion_tokens"
                }
            },
            "o1-mini": {
                "supported_params": ["model", "messages", "max_completion_tokens", "response_format", "frequency_penalty", "presence_penalty"],
                "default_values": {
                    "response_format": {"type": "text"},
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5
                },
                "param_mapping": {
                    "max_tokens": "max_completion_tokens"
                }
            },
            "o1": {
                "supported_params": ["model", "messages", "max_tokens", "response_format", "frequency_penalty", "presence_penalty", "temperature", "top_p"],
                "default_values": {
                    "response_format": {"type": "text"},
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5
                },
                "param_mapping": {}
            },
            "gpt-4o": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            },
            "gpt-4-turbo": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            },
            "gpt-4": {
                "supported_params": ["model", "messages", "max_tokens", "temperature", "top_p", "frequency_penalty", "presence_penalty", "response_format"],
                "default_values": {
                    "temperature": 0.7,
                    "top_p": 0.95,
                    "frequency_penalty": 0.5,
                    "presence_penalty": 0.5,
                    "response_format": {"type": "text"}
                },
                "param_mapping": {}
            }
        }
        
        # Parametri di base
        base_params = {
            "model": modello,
            "messages": messages,
            "max_tokens": limite_output_token
        }
        
        # Seleziona la configurazione per il modello corrente
        model_prefix = next((prefix for prefix in model_configs.keys() if modello.startswith(prefix)), "gpt-4")
        config = model_configs.get(model_prefix, model_configs["gpt-4"])
        
        logger.info(f"Utilizzando configurazione per il modello {model_prefix}")
        
        # Crea i parametri finali
        params = {}
        
        # Aggiungi i parametri di base supportati
        for param, value in base_params.items():
            # Se il parametro ha un mapping, usa il nome mappato
            mapped_param = config["param_mapping"].get(param, param)
            if mapped_param in config["supported_params"]:
                params[mapped_param] = value
                logger.debug(f"Parametro aggiunto: {mapped_param}")
        
        # Aggiungi i valori predefiniti per i parametri supportati
        for param, value in config["default_values"].items():
            if param in config["supported_params"] and param not in params:
                params[param] = value
                logger.debug(f"Parametro predefinito aggiunto: {param}")
        
        logger.info(f"Parametri finali per il modello {modello}: {', '.join(params.keys())}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "temperature" in params:
            logger.info(f"Aggiunto parametro 'temperature' per il modello {modello}")
        if "top_p" in params:
            logger.info(f"Aggiunto parametro 'top_p' per il modello {modello}")
        if "frequency_penalty" in params:
            logger.info(f"Aggiunto parametro 'frequency_penalty' per il modello {modello}")
        if "presence_penalty" in params:
            logger.info(f"Aggiunto parametro 'presence_penalty' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "max_tokens" in params:
            logger.info(f"Aggiunto parametro 'max_tokens' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "max_completion_tokens" in params:
            logger.info(f"Aggiunto parametro 'max_completion_tokens' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "response_format" in params:
            logger.info(f"Aggiunto parametro 'response_format' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "messages" in params:
            logger.info(f"Aggiunto parametro 'messages' per il modello {modello}")
        
        # Aggiungi eventuali parametri specifici del modello
        if "model" in params:
            logger.info(f"Aggiunto parametro 'model' per il modello {modello}")
        
import httpx
import json
import os
import random
import asyncio
from typing import Dict, List, Any, Optional, Callable
import logging
from app.config import load_config, save_config, get_config_value
from app.api.model_support import prepare_messages, prepare_api_parameters, get_model_config

# Configurazione logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def retry_with_exponential_backoff(
    func: Callable,
    max_retries: int = 3,
    initial_backoff: float = 1.0,
    backoff_factor: float = 2.0,
    jitter: bool = True
) -> Any:
    """
    Esegue una funzione con retry e backoff esponenziale.
    
    Args:
        func: La funzione asincrona da eseguire
        max_retries: Numero massimo di tentativi
        initial_backoff: Tempo di attesa iniziale in secondi
        backoff_factor: Fattore di crescita del tempo di attesa
        jitter: Se aggiungere una componente casuale al tempo di attesa
        
    Returns:
        Il risultato della funzione o solleva l'ultima eccezione
    """
    retries = 0
    backoff = initial_backoff
    
    while True:
        try:
            return await func()
        except (httpx.TimeoutException, 
                httpx.ReadTimeout, 
                httpx.ConnectTimeout, 
                httpx.RemoteProtocolError) as e:
            retries += 1
            if retries > max_retries:
                logger.warning(f"Numero massimo di tentativi raggiunto ({max_retries}). Ultimo errore: {str(e)}")
                raise
            
            # Calcola il tempo di attesa con jitter se richiesto
            wait_time = backoff
            if jitter:
                wait_time = backoff * (0.5 + random.random())
                
            logger.info(f"Tentativo {retries}/{max_retries} fallito: {str(e)}. Riprovo tra {wait_time:.2f} secondi...")
            await asyncio.sleep(wait_time)
            
            # Aggiorna il backoff per il prossimo tentativo
            backoff *= backoff_factor

class AIClient:
    """Client base per le API di intelligenza artificiale."""
    
    def __init__(self, api_key: str, base_url: str, provider: str):
        self.api_key = api_key
        self.base_url = base_url
        self.provider = provider
        logger.info(f"Inizializzato client {provider} con URL: {base_url}")
    
    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Metodo astratto per la generazione della scaletta."""
        raise NotImplementedError("Questo metodo deve essere implementato nelle classi derivate")
    
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Metodo astratto per la generazione del contenuto di un capitolo."""
        raise NotImplementedError("Questo metodo deve essere implementato nelle classi derivate")

class DeepSeekClient(AIClient):
    """Client per l'API DeepSeek."""
    
    def __init__(self, api_key: str, base_url: str = "https://api.deepseek.com"):
        super().__init__(api_key, base_url, "deepseek")
    
    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Genera la scaletta di un corso usando l'API DeepSeek."""
        try:
            logger.info(f"Generazione scaletta corso con DeepSeek: {parametri['titolo']}")
            
            # Determina la complessità della scaletta in base al livello
            livello = parametri['livello_complessita'].lower()
            if livello == 'base' or livello == 'principiante':
                num_capitoli = "3-4"
                num_sottocapitoli = "2-3"
                profondita = "semplice e introduttiva"
            elif livello == 'intermedio':
                num_capitoli = "4-6"
                num_sottocapitoli = "3-5"
                profondita = "moderatamente dettagliata"
            else:  # avanzato o esperto
                num_capitoli = "6-10"
                num_sottocapitoli = "4-8"
                profondita = "molto approfondita e completa, con concetti avanzati, esempi pratici estesi, casi di studio e applicazioni reali"
            
            # Costruisci il prompt per la generazione della scaletta
            template_prompt = """
            Sei un assistente esperto nella creazione di corsi formativi. 
            
            Devi generare la scaletta dettagliata per un corso con i seguenti parametri:
            
            Titolo: {titolo}
            Descrizione: {descrizione}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            Genera una scaletta in formato JSON con la seguente struttura:
            {{
              "titolo": "Titolo del corso",
              "descrizione": "Breve descrizione del corso",
              "durata_stimata": "XX ore",
              "capitoli": [
                {{
                  "id": "cap1",
                  "titolo": "Titolo Capitolo 1",
                  "descrizione": "Descrizione dettagliata del capitolo",
                  "sottoargomenti": [
                    {{
                      "titolo": "Titolo Sottoargomento 1.1",
                      "punti_chiave": ["punto 1", "punto 2", "punto 3"]
                    }},
                    // altri sottoargomenti
                  ]
                }},
                // altri capitoli
              ]
            }}
            
            Crea una struttura logica e progressiva che faciliti l'apprendimento.
            
            ISTRUZIONI IMPORTANTI:
            - Se sono stati specificati requisiti o risorse particolari, assicurati di INCLUDERLI ESPLICITAMENTE nella scaletta. 
            - Se sono menzionate risorse, tecnologie, metodi o concetti specifici nei requisiti, dedicagli capitoli o sottocapitoli appropriati.
            - Ogni risorsa o concetto nei requisiti deve essere visibilmente incluso nella scaletta finale.
            
            Poiché questo corso è di livello {livello_complessita}, deve essere {profondita}.
            - Includi {num_capitoli} capitoli con {num_sottocapitoli} sottoargomenti ciascuno, mantenendo un'elevata coerenza tematica.
            - Assicurati che i sottoargomenti coprano adeguatamente tutti gli aspetti del tema, dagli aspetti teorici alle applicazioni pratiche.
            - I punti chiave devono essere specifici e dettagliati, non generici.
            - Per un corso avanzato sul prompting, copri a fondo aspetti come: tecniche avanzate, pattern di prompt, strategie per diversi modelli e task, ottimizzazione, debugging, casi d'uso specialistici, personalizzazione, risoluzione di problemi comuni, e valutazione dell'efficacia.
            
            Ogni capitolo deve avere un ID univoco (cap1, cap2, ecc.). Assicurati che il JSON sia ben formato e valido.
            """
            
            # Sostituisci i valori nel template
            requisiti = parametri.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"""REQUISITI SPECIFICI DA INCORPORARE NELLA SCALETTA:
-------------------------------------------------
{requisiti}
-------------------------------------------------"""
            
            stile_scrittura = parametri.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"""

STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
            
            prompt = template_prompt.format(
                titolo=parametri['titolo'],
                descrizione=parametri['descrizione'],
                pubblico_target=parametri['pubblico_target'],
                livello_complessita=parametri['livello_complessita'],
                tono=parametri['tono'],
                requisiti_specifici=requisiti,
                profondita=profondita,
                num_capitoli=num_capitoli,
                num_sottocapitoli=num_sottocapitoli
            )
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 4000
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/completions",
                            headers=headers,
                            json=payload,
                            timeout=120.0  # Aumentiamo il timeout a 2 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API DeepSeek dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API DeepSeek: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API DeepSeek: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API DeepSeek: {error_msg}"
                    }
                
                try:
                    # Estrai la scaletta dal messaggio di risposta
                    content = response_data['choices'][0]['text']
                    
                    # Cerca il JSON nella risposta
                    import re
                    json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                    
                    if json_match:
                        scaletta_json = json_match.group(1)
                    else:
                        # Prova a trovare un oggetto JSON nella risposta
                        json_match = re.search(r'({[\s\S]*})', content)
                        if json_match:
                            scaletta_json = json_match.group(1)
                        else:
                            # Se non troviamo un JSON, riportiamo un errore
                            logger.error(f"Impossibile trovare un oggetto JSON nella risposta: {content[:200]}...")
                            return {
                                "success": False,
                                "message": "La risposta dell'API non contiene un oggetto JSON valido"
                            }
                    
                    # Pulisce il JSON da eventuali commenti o caratteri non validi
                    # Rimuove i commenti con // alla fine delle righe
                    scaletta_json = re.sub(r'//.*$', '', scaletta_json, flags=re.MULTILINE)
                    
                    try:
                        scaletta = json.loads(scaletta_json)
                    except json.JSONDecodeError as e:
                        logger.error(f"Errore nel parsing JSON: {str(e)}")
                        logger.error(f"JSON con errore: {scaletta_json[:200]}...")
                        
                        # Tentativo più aggressivo di pulizia del JSON
                        try:
                            # Rimuove i commenti con //
                            clean_json = re.sub(r'//.*?(\n|$)', '\n', scaletta_json)
                            # Rimuove le virgole trailing prima delle parentesi chiuse
                            clean_json = re.sub(r',\s*}', '}', clean_json)
                            clean_json = re.sub(r',\s*]', ']', clean_json)
                            
                            scaletta = json.loads(clean_json)
                            logger.info("Recupero JSON riuscito dopo pulizia aggressiva")
                        except Exception as inner_e:
                            logger.error(f"Errore nel secondo tentativo di parsing JSON: {str(inner_e)}")
                            return {
                                "success": False,
                                "message": f"Errore nel parsing del JSON: {str(e)}"
                            }
                    
                    # Verifica che la scaletta contenga i campi minimi necessari
                    if not all(k in scaletta for k in ['titolo', 'descrizione', 'capitoli']):
                        logger.error(f"JSON mancante di campi obbligatori: {scaletta.keys()}")
                        return {
                            "success": False,
                            "message": "La scaletta generata è incompleta o malformata"
                        }
                    
                    return {
                        "success": True,
                        "scaletta": scaletta
                    }
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione della scaletta: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione della scaletta: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione della scaletta: {str(e)}"
            }
    
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera il contenuto di un capitolo specifico usando l'API DeepSeek."""
        try:
            logger.info(f"Generazione contenuto capitolo con DeepSeek: {capitolo_id}")
            
            # Trova il capitolo da generare
            capitolo = None
            for cap in scaletta['capitoli']:
                if cap['id'] == capitolo_id:
                    capitolo = cap
                    break
            
            if not capitolo:
                return {
                    "success": False,
                    "message": f"Capitolo con ID {capitolo_id} non trovato"
                }
            
            # Costruisci il prompt per la generazione del contenuto
            template_prompt = """
            Sei un assistente esperto nella creazione di contenuti didattici di alta qualità.
            
            Devi generare il contenuto dettagliato per un capitolo di un corso con i seguenti parametri:
            
            CORSO:
            Titolo: {titolo_corso}
            Descrizione: {descrizione_corso}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            CAPITOLO DA GENERARE:
            Titolo: {titolo_capitolo}
            Descrizione: {descrizione_capitolo}
            
            SOTTOARGOMENTI:
            {sottoargomenti}
            
            {contenuto_precedente}
            
            Genera il contenuto completo del capitolo in formato Markdown. 
            Includi un'introduzione generale al capitolo, e poi sviluppa in dettaglio ogni sottoargomento.
            Per ogni sottoargomento, crea una sezione con un titolo di secondo livello (##), seguito da un testo
            esplicativo dettagliato che copra tutti i punti chiave elencati.
            
            Il contenuto deve essere approfondito, accurato ed educativo, mantenendo il livello di complessità e il tono richiesti.
            Includi esempi pratici, analogie dove appropriato, e una conclusione che riassuma i concetti chiave del capitolo.
            """
            
            # Formatta i sottoargomenti
            sottoargomenti_str = ""
            
            # Gestisci sia il vecchio formato (sottoargomenti) che il nuovo (sottocapitoli)
            sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
            
            for i, sotto in enumerate(sotto_items):
                sottoargomenti_str += f"Sottoargomento {i+1}: {sotto['titolo']}\n"
                # Gestisci sia i punti_chiave che descrizioni più generiche
                if 'punti_chiave' in sotto:
                    sottoargomenti_str += "Punti chiave:\n"
                    for punto in sotto['punti_chiave']:
                        sottoargomenti_str += f"- {punto}\n"
                elif 'descrizione' in sotto:
                    sottoargomenti_str += f"Descrizione: {sotto['descrizione']}\n"
                sottoargomenti_str += "\n"
            
            # Formatta eventuali contenuti precedenti
            contenuto_precedente_str = ""
            if contenuto_precedente and len(contenuto_precedente) > 0:
                contenuto_precedente_str = "CONTENUTO DEI CAPITOLI PRECEDENTI (per mantenere la coerenza):\n"
                for prev_cap in contenuto_precedente:
                    contenuto_precedente_str += f"Capitolo: {prev_cap['titolo']}\n"
                    contenuto_precedente_str += f"Riassunto: {prev_cap['riassunto']}\n\n"
            
            # Sostituisci i valori nel template
            requisiti = parametri_corso.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"Requisiti specifici: {requisiti}"
            
            stile_scrittura = parametri_corso.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"\nStile di scrittura: {stile_scrittura}"
            
            prompt = template_prompt.format(
                titolo_corso=parametri_corso['titolo'],
                descrizione_corso=parametri_corso['descrizione'],
                pubblico_target=parametri_corso['pubblico_target'],
                livello_complessita=parametri_corso['livello_complessita'],
                tono=parametri_corso['tono'],
                requisiti_specifici=requisiti,
                titolo_capitolo=capitolo['titolo'],
                descrizione_capitolo=capitolo['descrizione'],
                sottoargomenti=sottoargomenti_str,
                contenuto_precedente=contenuto_precedente_str
            )
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "deepseek-chat",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.7,
                "max_tokens": 4000
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API DeepSeek dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API DeepSeek: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API DeepSeek: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API DeepSeek: {error_msg}"
                    }
                
                try:
                    # Estrai il contenuto dal messaggio di risposta
                    content = response_data['choices'][0]['message']['content']
                    
                    return {
                        "success": True,
                        "contenuto": content
                    }
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione del contenuto: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione del contenuto: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione del contenuto: {str(e)}"
            }

class OpenAIClient(AIClient):
    """Client per le API di OpenAI."""
    
    def __init__(self, api_key: str, base_url: str = "https://api.openai.com"):
        """Inizializza il client OpenAI."""
        super().__init__(api_key, base_url, "openai")
        
        # Configurazione del modello da utilizzare (configurabile)
        config = load_config()
        # Imposta o1-preview come modello predefinito per massima qualità
        model_setting = config.get("openai_model", "o1-preview")  # Default a o1-preview per massima qualità
        
        # Forza l'uso di o1-preview come prima scelta quando la configurazione è o1
        if model_setting == "o1":
            logger.info("Modello 'o1' selezionato. Proveremo prima 'o1-preview' poiché offre la massima qualità.")
            self.model = "o1-preview"
        else:
            self.model = model_setting
        
        logger.info(f"OpenAI client configurato per utilizzare il modello: {self.model}")
        
        # Limitazione ai soli modelli di alta qualità per garantire output eccellenti
        # Nessun fallback a modelli di qualità inferiore come gpt-3.5
        self.fallback_models = [
            "o1-preview", "o1", "gpt-4o-1", "gpt-4o",   # Modelli di massima qualità
            "gpt-4-turbo", "gpt-4"                      # Modelli gpt-4 di alta qualità
        ]
        
        # Log all models we're going to try
        logger.info(f"Modelli di alta qualità disponibili: {', '.join(self.fallback_models)}")
        
        # Verifica i modelli disponibili all'avvio
        self.available_models = []
        self._check_models_sync()
    
    def _check_models_sync(self):
        """Verifica i modelli disponibili in modo sincrono (solo all'avvio)."""
        import requests  # Usiamo requests per la chiamata sincrona
        
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            response = requests.get(
                f"{self.base_url}/v1/models",
                headers=headers,
                timeout=10.0
            )
            
            if response.status_code == 200:
                models_data = response.json()
                available_models = [model["id"] for model in models_data.get("data", [])]
                self.available_models = available_models
                
                logger.info(f"Modelli OpenAI disponibili: {', '.join(available_models[:10])}...")
                logger.info(f"Totale modelli disponibili: {len(available_models)}")
                
                # Verifica quali modelli di alta qualità sono disponibili
                premium_models = [m for m in self.fallback_models if m in available_models]
                
                if premium_models:
                    # Filtra solo i modelli di alta qualità
                    logger.info(f"Modelli di alta qualità disponibili nell'API: {', '.join(premium_models)}")
                    self.fallback_models = premium_models
                    
                    # IMPORTANTE: Forza l'uso di o1-preview se disponibile
                    if "o1-preview" in premium_models:
                        self.model = "o1-preview"
                        logger.info("Forzato utilizzo di o1-preview come modello principale (massima qualità)")
                        # Aggiorna la configurazione salvata
                        config = load_config()
                        config["openai_model"] = "o1-preview"
                        save_config(config)
                    elif "o1" in premium_models:
                        self.model = "o1"
                        logger.info("Forzato utilizzo di o1 come modello principale (massima qualità)")
                        # Aggiorna la configurazione salvata
                        config = load_config()
                        config["openai_model"] = "o1"
                        save_config(config)
                else:
                    # Avvisa che nessun modello di alta qualità è disponibile
                    logger.warning("ATTENZIONE: Nessun modello di alta qualità è disponibile nel tuo account!")
                    logger.warning("Si consiglia di aggiornare la sottoscrizione OpenAI per accedere ai modelli premium.")
        except Exception as e:
            logger.error(f"Errore durante la verifica dei modelli disponibili: {str(e)}")
            # Continua con i modelli predefiniti
        
    async def check_available_models(self) -> List[str]:
        """Verifica quali modelli sono disponibili per questo progetto OpenAI."""
        if self.available_models:
            return self.available_models
            
        logger.info("Verificando i modelli disponibili nel progetto OpenAI...")
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers,
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    models_data = response.json()
                    available_model_ids = [model["id"] for model in models_data.get("data", [])]
                    self.available_models = available_model_ids
                    
                    # Logga i modelli disponibili
                    logger.info(f"Modelli disponibili nel progetto: {', '.join(available_model_ids)}")
                    
                    # Aggiorna i modelli di fallback per includere solo quelli disponibili
                    self.fallback_models = [model for model in self.fallback_models if model in available_model_ids]
                    
                    if not self.fallback_models and available_model_ids:
                        # Se nessuno dei nostri modelli è disponibile ma ce ne sono altri,
                        # aggiungiamo quelli disponibili alla lista
                        self.fallback_models.extend(available_model_ids)
                        
                    logger.info(f"Modelli di fallback effettivamente disponibili: {', '.join(self.fallback_models)}")
                    
                    return available_model_ids
                else:
                    logger.error(f"Errore nell'ottenere la lista dei modelli: {response.text}")
                    return []
        except Exception as e:
            logger.error(f"Eccezione durante la verifica dei modelli disponibili: {str(e)}")
            return []
            
    async def _call_api_with_fallback(self, prompt: str, capitolo_id: str) -> Dict[str, Any]:
        """Chiama l'API OpenAI con fallback automatico a modelli alternativi se necessario."""
        # Prima di tutto, verifica quali modelli sono disponibili
        available_models = await self.check_available_models()
        
        if not self.fallback_models:
            return {
                "success": False,
                "message": "Nessun modello di alta qualità disponibile. Per garantire risultati eccellenti, " +
                           "è necessario aggiornare la sottoscrizione OpenAI per accedere ai modelli premium (o1-preview, gpt-4o, ecc)."
            }
        
        # PRIORITÀ ASSOLUTA: Riorganizza la lista di fallback per dare priorità a o1-preview se disponibile
        if "o1-preview" in self.fallback_models:
            # Riorganizza la lista per mettere o1-preview come primo elemento
            self.fallback_models = ["o1-preview"] + [m for m in self.fallback_models if m != "o1-preview"]
            logger.info(f"Lista modelli riorganizzata per dare priorità a o1-preview: {', '.join(self.fallback_models)}")
            
            # Forza anche il modello corrente a o1-preview
            self.model = "o1-preview"
            # Aggiorna la configurazione
            config = load_config()
            config["openai_model"] = "o1-preview"
            save_config(config)
        elif "o1" in self.fallback_models:
            # Fallback a o1 se o1-preview non è disponibile
            self.fallback_models = ["o1"] + [m for m in self.fallback_models if m != "o1"]
            logger.info(f"Lista modelli riorganizzata per dare priorità a o1: {', '.join(self.fallback_models)}")
            self.model = "o1"
            # Aggiorna la configurazione
            config = load_config()
            config["openai_model"] = "o1"
            save_config(config)
            
        # Determina l'indice del modello corrente nella lista di fallback
        try:
            current_index = self.fallback_models.index(self.model)
        except ValueError:
            # Se il modello configurato non è nella lista dei modelli di alta qualità disponibili,
            # imposta il modello al primo della lista
            current_index = 0
            if self.fallback_models:
                self.model = self.fallback_models[current_index]
                logger.info(f"Modello configurato non disponibile o non di alta qualità, usando: {self.model}")
            else:
                return {
                    "success": False,
                    "message": "Nessun modello di alta qualità disponibile. L'applicazione richiede modelli premium " +
                               "come o1-preview o gpt-4o per garantire risultati eccellenti."
                }
        
        # Implementiamo un vero meccanismo di fallback, provando modelli in sequenza
        max_attempts = min(5, len(self.fallback_models))  # Limita a 5 tentativi
        attempt = 0
        
        # Lista completa per tentativi di emergenza, inclusi alcuni modelli di backup
        emergency_models = ["o3-mini", "gpt-4-vision-preview"]
        
        while attempt < max_attempts:
            # Usa il modello corrente dalla lista di fallback
            current_model = self.fallback_models[current_index]
            attempt += 1
            
            # Configurazione del payload in base al modello
            tokens_limit = 8000 if current_model.startswith("o1") else 4000
            logger.info(f"Tentativo #{attempt} con modello di alta qualità '{current_model}', limite token={tokens_limit}")
            
            # Adattamento del formato dei messaggi in base al modello
            messages = []
            
            # Alcuni modelli come o1-preview potrebbero non supportare il ruolo 'system'
            # Verifichiamo il modello e adattiamo il formato dei messaggi
            if current_model.startswith("o1-preview") or current_model.startswith("o1-mini"):
                # Per modelli che non supportano 'system', includiamo le istruzioni nel messaggio utente
                system_instruction = "Sei un esperto nella creazione di contenuti didattici di alta qualità.\n\n"
                messages = [
                    {"role": "user", "content": system_instruction + prompt}
                ]
                logger.info(f"Usando formato semplificato dei messaggi per il modello {current_model}")
            else:
                # Per modelli che supportano 'system', usiamo il formato standard
                messages = [
                    {"role": "system", "content": "Sei un esperto nella creazione di contenuti didattici di alta qualità."},
                    {"role": "user", "content": prompt}
                ]
            
            payload = {
                "model": current_model,
                "messages": messages,
            }
            
            # Alcuni modelli come o1-preview usano max_completion_tokens invece di max_tokens
            if current_model.startswith("o1-preview") or current_model.startswith("o1-mini"):
                payload["max_completion_tokens"] = tokens_limit
                logger.info(f"Usando 'max_completion_tokens' per il modello {current_model}")
                # o1-preview non supporta valori personalizzati per temperature
                logger.info(f"Rimuovendo 'temperature' per il modello {current_model} (usa solo valore predefinito)")
                payload.pop("temperature", None)  # Rimuove temperature se presente
            else:
                payload["max_tokens"] = tokens_limit
                payload["temperature"] = 0.7
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            try:
                async with httpx.AsyncClient() as client:
                    # Definisci una funzione interna per la chiamata API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatici
                    logger.info(f"Invio richiesta a OpenAI per modello {current_model} con retry automatici")
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=2,  # Solo 2 tentativi per modello, poi si prova un altro modello
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                    
                    # Processa la risposta
                    response_data = response.json()
                    
                    if response.status_code == 200:
                        # Richiesta riuscita, aggiorna il modello corrente se diverso
                        if self.model != current_model:
                            logger.info(f"Modello di alta qualità '{current_model}' funzionante. Aggiornando la configurazione...")
                            self.model = current_model
                            # Aggiorna la configurazione per le prossime chiamate
                            config = load_config()
                            config["openai_model"] = self.model
                            save_config(config)
                        
                        # Estrai il contenuto dal messaggio di risposta
                        content = response_data['choices'][0]['message']['content']
                        
                        logger.info(f"Contenuto generato con successo usando il modello '{current_model}'")
                        
                        # Restituisci il risultato
                        return {
                            "success": True,
                            "contenuto": content,
                            "modello_utilizzato": current_model
                        }
                    else:
                        # API ha restituito un errore, prova con il prossimo modello
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                        logger.error(f"Errore API OpenAI con modello '{current_model}': {response_data}")
                        logger.warning(f"Tentativo #{attempt} fallito: {error_msg}")
            except httpx.TimeoutException:
                logger.warning(f"Timeout nella richiesta con modello '{current_model}'. Provando un altro modello...")
            except httpx.ReadTimeout:
                logger.warning(f"Read timeout con modello '{current_model}' - il server ha impiegato troppo tempo per rispondere")
            except httpx.ConnectTimeout:
                logger.warning(f"Connect timeout con modello '{current_model}' - impossibile stabilire una connessione")
            except httpx.RemoteProtocolError:
                logger.warning(f"Errore di protocollo remoto con modello '{current_model}' - la connessione è stata chiusa inaspettatamente")
            except httpx.RequestError as e:
                logger.warning(f"Errore di rete con modello '{current_model}': {str(e)}")
            except Exception as e:
                logger.warning(f"Errore generico con modello '{current_model}': {str(e)}")
            
            # Se siamo qui, c'è stato un errore. Prova il prossimo modello
            current_index = (current_index + 1) % len(self.fallback_models)
            continue
        
        # Se tutti i modelli di alta qualità falliscono, proviamo con o3-mini come ultima risorsa
        logger.warning("Tutti i modelli di alta qualità hanno fallito. Provo con o3-mini come ultima risorsa...")
        
        for emergency_model in emergency_models:
            if emergency_model in self.available_models:
                logger.info(f"Tentativo di emergenza con modello {emergency_model}")
                
                emergency_payload = {
                    "model": emergency_model,
                    "messages": [
                        {"role": "system", "content": "Sei un esperto nella creazione di contenuti didattici di alta qualità."},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 4000
                }
                
                if emergency_model == "o3-mini":
                    emergency_payload["reasoning_effort"] = "high"
                
                try:
                    async with httpx.AsyncClient() as client:
                        response = await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=emergency_payload,
                            timeout=120.0
                        )
                        
                        if response.status_code == 200:
                            response_data = response.json()
                            content = response_data['choices'][0]['message']['content']
                            logger.warning(f"Utilizzato modello di emergenza {emergency_model}. Si consiglia di verificare la qualità del contenuto.")
                            return {
                                "success": True,
                                "contenuto": content,
                                "warning": "Contenuto generato con modello di emergenza. La qualità potrebbe essere inferiore.",
                                "modello_utilizzato": emergency_model
                            }
                except Exception as e:
                    logger.error(f"Anche il tentativo di emergenza con {emergency_model} è fallito: {str(e)}")
                    continue
        
        # Se siamo arrivati qui, tutti i tentativi sono falliti
        return {
            "success": False,
            "message": f"Impossibile generare contenuto con modelli di alta qualità. Si consiglia di verificare la sottoscrizione OpenAI per accedere ai modelli premium (o1-preview, gpt-4o)."
        }

    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Genera la scaletta di un corso usando l'API OpenAI."""
        try:
            logger.info(f"Generazione scaletta corso con OpenAI: {parametri['titolo']}")
            
            # Determina la complessità della scaletta in base al livello
            livello = parametri['livello_complessita'].lower()
            if livello == 'base' or livello == 'principiante':
                num_capitoli = "3-4"
                num_sottocapitoli = "2-3"
                profondita = "semplice e introduttiva"
            elif livello == 'intermedio':
                num_capitoli = "4-6"
                num_sottocapitoli = "3-5"
                profondita = "moderatamente dettagliata"
            else:  # avanzato o esperto
                num_capitoli = "6-10"
                num_sottocapitoli = "4-8"
                profondita = "molto approfondita e completa, con concetti avanzati, esempi pratici estesi, casi di studio e applicazioni reali"
            
            # Costruisci il prompt per la generazione della scaletta
            template_prompt = """
            Sei un assistente esperto nella creazione di corsi formativi. 
            
            Devi generare la scaletta dettagliata per un corso con i seguenti parametri:
            
            Titolo: {titolo}
            Descrizione: {descrizione}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            Genera una scaletta in formato JSON con la seguente struttura:
            {{
              "titolo": "Titolo del corso",
              "descrizione": "Breve descrizione del corso",
              "durata_stimata": "XX ore",
              "capitoli": [
                {{
                  "id": "cap1",
                  "titolo": "Titolo Capitolo 1",
                  "descrizione": "Descrizione dettagliata del capitolo",
                  "sottoargomenti": [
                    {{
                      "titolo": "Titolo Sottoargomento 1.1",
                      "punti_chiave": ["punto 1", "punto 2", "punto 3"]
                    }},
                    // altri sottoargomenti
                  ]
                }},
                // altri capitoli
              ]
            }}
            
            Crea una struttura logica e progressiva che faciliti l'apprendimento.
            
            ISTRUZIONI IMPORTANTI:
            - Se sono stati specificati requisiti o risorse particolari, assicurati di INCLUDERLI ESPLICITAMENTE nella scaletta. 
            - Se sono menzionate risorse, tecnologie, metodi o concetti specifici nei requisiti, dedicagli capitoli o sottocapitoli appropriati.
            - Ogni risorsa o concetto nei requisiti deve essere visibilmente incluso nella scaletta finale.
            
            Poiché questo corso è di livello {livello_complessita}, deve essere {profondita}.
            - Includi {num_capitoli} capitoli con {num_sottocapitoli} sottoargomenti ciascuno, mantenendo un'elevata coerenza tematica.
            - Assicurati che i sottoargomenti coprano adeguatamente tutti gli aspetti del tema, dagli aspetti teorici alle applicazioni pratiche.
            - I punti chiave devono essere specifici e dettagliati, non generici.
            - Per un corso avanzato sul prompting, copri a fondo aspetti come: tecniche avanzate, pattern di prompt, strategie per diversi modelli e task, ottimizzazione, debugging, casi d'uso specialistici, personalizzazione, risoluzione di problemi comuni, e valutazione dell'efficacia.
            
            Ogni capitolo deve avere un ID univoco (cap1, cap2, ecc.). Assicurati che il JSON sia ben formato e valido.
            """
            
            # Sostituisci i valori nel template
            requisiti = parametri.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"""REQUISITI SPECIFICI DA INCORPORARE NELLA SCALETTA:
-------------------------------------------------
{requisiti}
-------------------------------------------------"""
            
            stile_scrittura = parametri.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"""

STILE DI SCRITTURA DA ADOTTARE:
-------------------------------------------------
{stile_scrittura}
-------------------------------------------------"""
            
            prompt = template_prompt.format(
                titolo=parametri['titolo'],
                descrizione=parametri['descrizione'],
                pubblico_target=parametri['pubblico_target'],
                livello_complessita=parametri['livello_complessita'],
                tono=parametri['tono'],
                requisiti_specifici=requisiti,
                profondita=profondita,
                num_capitoli=num_capitoli,
                num_sottocapitoli=num_sottocapitoli
            )
        
            # Usa uno dei modelli disponibili dal nostro sistema di fallback
            model_to_use = self.fallback_models[0] if self.fallback_models else self.model
            logger.info(f"Usando modello {model_to_use} per generare la scaletta")
            
            # Prepara i messaggi appropriati per il modello
            system_content = "Sei un esperto nella creazione di corsi formativi."
            messages = prepare_messages(model_to_use, system_content, prompt)
            
            # Prepara i parametri API appropriati per il modello
            payload = prepare_api_parameters(model_to_use, messages)
            
            # Log dettagliato dei parametri utilizzati
            logger.info(f"Parametri API per {model_to_use}: "
                      f"supports_system={get_model_config(model_to_use)['supports_system_role']}, "
                      f"max_tokens_param={get_model_config(model_to_use)['max_tokens_param']}, "
                      f"tokens={get_model_config(model_to_use)['default_max_tokens']}")
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            async with httpx.AsyncClient() as client:
                try:
                    # Definiamo una funzione interna per effettuare la richiesta API con retry
                    async def make_api_request():
                        return await client.post(
                            f"{self.base_url}/v1/chat/completions",
                            headers=headers,
                            json=payload,
                            timeout=180.0  # 3 minuti
                        )
                    
                    # Esegui la richiesta con retry automatico
                    response = await retry_with_exponential_backoff(
                        make_api_request,
                        max_retries=3,
                        initial_backoff=1.0,
                        backoff_factor=2.0
                    )
                except (httpx.TimeoutException, httpx.ReadTimeout, httpx.ConnectTimeout, httpx.RemoteProtocolError) as e:
                    logger.error(f"Errore di connessione persistente all'API OpenAI dopo diversi tentativi: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
                    }
                except httpx.RequestError as e:
                    logger.error(f"Errore di rete nella richiesta all'API OpenAI: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore di rete durante la richiesta all'API: {str(e)}"
                    }
                
                try:
                    response_data = response.json()
                except Exception as e:
                    logger.error(f"Errore nel parsing della risposta JSON: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore nel parsing della risposta: {str(e)}"
                    }
                
                if response.status_code != 200:
                    error_msg = "Errore sconosciuto"
                    try:
                        error_msg = response_data.get('error', {}).get('message', 'Errore sconosciuto')
                    except Exception:
                        pass
                        
                    logger.error(f"Errore API OpenAI: {response.status_code} - {error_msg}")
                    return {
                        "success": False,
                        "message": f"Errore nell'API OpenAI: {error_msg}"
                    }
                
                try:
                    # Estrai la scaletta dal messaggio di risposta
                    content = response_data['choices'][0]['message']['content']
                    
                    # Cerca il JSON nella risposta
                    import re
                    json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                    if json_match:
                        json_str = json_match.group(1)
                    else:
                        # Prova a estrarre il JSON senza il formato markdown
                        json_match = re.search(r'({[\s\S]*})', content)
                        if json_match:
                            json_str = json_match.group(1)
                        else:
                            json_str = content
                    
                    # Pulisce il JSON da eventuali commenti o caratteri non validi
                    # Rimuove i commenti con // alla fine delle righe
                    json_str = re.sub(r'//.*$', '', json_str, flags=re.MULTILINE)
                    
                    try:
                        scaletta = json.loads(json_str)
                    except json.JSONDecodeError as e:
                        logger.error(f"Errore nel parsing JSON: {str(e)}")
                        logger.error(f"JSON con errore: {json_str[:200]}...")
                        
                        # Tentativo più aggressivo di pulizia del JSON
                        try:
                            # Rimuove i commenti con //
                            clean_json = re.sub(r'//.*?(\n|$)', '\n', json_str)
                            # Rimuove le virgole trailing prima delle parentesi chiuse
                            clean_json = re.sub(r',\s*}', '}', clean_json)
                            clean_json = re.sub(r',\s*]', ']', clean_json)
                            
                            scaletta = json.loads(clean_json)
                            logger.info("Recupero JSON riuscito dopo pulizia aggressiva")
                        except Exception as inner_e:
                            logger.error(f"Errore nel secondo tentativo di parsing JSON: {str(inner_e)}")
                            return {
                                "success": False,
                                "message": f"Errore nel parsing del JSON: {str(e)}",
                                "content": content
                            }
                    
                    # Verifica che la scaletta contenga i campi minimi necessari
                    if not all(k in scaletta for k in ['titolo', 'descrizione', 'capitoli']):
                        logger.error(f"JSON mancante di campi obbligatori: {scaletta.keys()}")
                        return {
                            "success": False,
                            "message": "La scaletta generata è incompleta o malformata"
                        }
                    
                    return {
                        "success": True,
                        "scaletta": scaletta
                    }
                    
                except Exception as e:
                    logger.exception(f"Errore imprevisto durante l'elaborazione della risposta: {str(e)}")
                    return {
                        "success": False,
                        "message": f"Errore durante la generazione della scaletta: {str(e)}"
                    }
                
        except Exception as e:
            logger.error(f"Errore durante la generazione della scaletta: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione della scaletta: {str(e)}"
            }
            
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera il contenuto di un capitolo specifico usando l'API OpenAI."""
        try:
            logger.info(f"Generazione contenuto capitolo con OpenAI: {capitolo_id}")
            
            # Trova il capitolo da generare
            capitolo = None
            for cap in scaletta['capitoli']:
                if cap['id'] == capitolo_id:
                    capitolo = cap
                    break
            
            if not capitolo:
                return {
                    "success": False,
                    "message": f"Capitolo con ID {capitolo_id} non trovato"
                }
            
            # Costruisci il prompt per la generazione del contenuto
            template_prompt = """
            Sei un assistente esperto nella creazione di contenuti didattici di alta qualità.
            
            Devi generare il contenuto dettagliato per un capitolo di un corso con i seguenti parametri:
            
            CORSO:
            Titolo: {titolo_corso}
            Descrizione: {descrizione_corso}
            Pubblico: {pubblico_target}
            Livello di complessità: {livello_complessita}
            Tono: {tono}
            
            {requisiti_specifici}
            
            CAPITOLO DA GENERARE:
            Titolo: {titolo_capitolo}
            Descrizione: {descrizione_capitolo}
            
            SOTTOARGOMENTI:
            {sottoargomenti}
            
            {contenuto_precedente}
            
            Genera il contenuto completo del capitolo in formato Markdown. 
            Includi un'introduzione generale al capitolo, e poi sviluppa in dettaglio ogni sottoargomento.
            Per ogni sottoargomento, crea una sezione con un titolo di secondo livello (##), seguito da un testo
            esplicativo dettagliato che copra tutti i punti chiave elencati.
            
            Il contenuto deve essere approfondito, accurato ed educativo, mantenendo il livello di complessità e il tono richiesti.
            Includi esempi pratici, analogie dove appropriato, e una conclusione che riassuma i concetti chiave del capitolo.
            """
            
            # Formatta i sottoargomenti
            sottoargomenti_str = ""
            
            # Gestisci sia il vecchio formato (sottoargomenti) che il nuovo (sottocapitoli)
            sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
            
            for i, sotto in enumerate(sotto_items):
                sottoargomenti_str += f"Sottoargomento {i+1}: {sotto['titolo']}\n"
                # Gestisci sia i punti_chiave che descrizioni più generiche
                if 'punti_chiave' in sotto:
                    sottoargomenti_str += "Punti chiave:\n"
                    for punto in sotto['punti_chiave']:
                        sottoargomenti_str += f"- {punto}\n"
                elif 'descrizione' in sotto:
                    sottoargomenti_str += f"Descrizione: {sotto['descrizione']}\n"
                sottoargomenti_str += "\n"
            
            # Formatta eventuali contenuti precedenti
            contenuto_precedente_str = ""
            if contenuto_precedente and len(contenuto_precedente) > 0:
                contenuto_precedente_str = "CONTENUTO DEI CAPITOLI PRECEDENTI (per mantenere la coerenza):\n"
                for prev_cap in contenuto_precedente:
                    contenuto_precedente_str += f"Capitolo: {prev_cap['titolo']}\n"
                    contenuto_precedente_str += f"Riassunto: {prev_cap['riassunto']}\n\n"
            
            # Sostituisci i valori nel template
            requisiti = parametri_corso.get('requisiti_specifici', '')
            if requisiti:
                requisiti = f"Requisiti specifici: {requisiti}"
            
            stile_scrittura = parametri_corso.get('stile_scrittura', '')
            if stile_scrittura:
                requisiti += f"\nStile di scrittura: {stile_scrittura}"
            
            prompt = template_prompt.format(
                titolo_corso=parametri_corso['titolo'],
                descrizione_corso=parametri_corso['descrizione'],
                pubblico_target=parametri_corso['pubblico_target'],
                livello_complessita=parametri_corso['livello_complessita'],
                tono=parametri_corso['tono'],
                requisiti_specifici=requisiti,
                titolo_capitolo=capitolo['titolo'],
                descrizione_capitolo=capitolo['descrizione'],
                sottoargomenti=sottoargomenti_str,
                contenuto_precedente=contenuto_precedente_str
            )
            
            # Utilizza il metodo _call_api_with_fallback per gestire automaticamente la selezione del modello
            # e il fallback in caso di errori
            result = await self._call_api_with_fallback(prompt, capitolo_id)
            
            # Se il risultato è un successo, lo restituiamo direttamente
            return result
                
        except Exception as e:
            logger.error(f"Errore durante la generazione del contenuto: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la generazione del contenuto: {str(e)}"
            }

    async def genera_contenuto_espanso(self, corso_id: str, capitolo_id: str, contenuto_originale: str, prompt_espansione: str) -> Dict[str, Any]:
        """
        Genera una versione espansa del contenuto di un capitolo.
        
        Args:
            corso_id: ID del corso
            capitolo_id: ID del capitolo
            contenuto_originale: Contenuto originale da espandere
            prompt_espansione: Prompt con le istruzioni per l'espansione
            
        Returns:
            Dizionario con il risultato dell'operazione
        """
        logger.info(f"Generazione contenuto espanso per capitolo {capitolo_id} del corso {corso_id}")
        
        # Verifica la validità della chiave API
        verifica_risultato = await self.verifica_chiave_api()
        if not verifica_risultato["success"]:
            logger.error(f"Impossibile procedere con l'espansione: {verifica_risultato['message']}")
            return {
                "success": False,
                "message": f"Impossibile procedere con l'espansione: {verifica_risultato['message']}"
            }
        
        # Verifica la lunghezza del contenuto originale
        num_token_originale = self._stima_token(contenuto_originale)
        logger.info(f"Lunghezza stimata del contenuto originale: {num_token_originale} token")
        
        # Seleziona il modello appropriato
        modello = self._seleziona_modello_per_espansione()
        logger.info(f"Utilizzo del modello {modello} per l'espansione del contenuto")
        
        # Ottieni i limiti di token per il modello selezionato
        modelli_info = {
            "o1-preview": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "o1": {
                "max_input_tokens": 32768,
                "max_output_tokens": 4096
            },
            "gpt-4o": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4-turbo": {
                "max_input_tokens": 128000,
                "max_output_tokens": 4096
            },
            "gpt-4": {
                "max_input_tokens": 8192,
                "max_output_tokens": 4096
            }
        }
        
        # Imposta i limiti di token in base al modello
        limite_input_token = modelli_info.get(modello, {}).get("max_input_tokens", 4000)
        limite_output_token = modelli_info.get(modello, {}).get("max_output_tokens", 4000)
        
        logger.info(f"Limiti di token per il modello {modello}: input={limite_input_token}, output={limite_output_token}")
        
        # Verifica se il contenuto è troppo lungo per essere elaborato in una singola richiesta
        # Consideriamo un limite di sicurezza per lasciare spazio al prompt e alla risposta
        limite_token_sicuro = limite_input_token - 1000  # Riserviamo 1000 token per il prompt
        
        if num_token_originale > limite_token_sicuro:
            logger.warning(f"Contenuto troppo lungo ({num_token_originale} token) per una singola richiesta. Verrà troncato.")
            # Tronca il contenuto originale per rientrare nel limite
            contenuto_originale = self._tronca_testo_per_token(contenuto_originale, limite_token_sicuro)
            logger.info(f"Contenuto troncato a circa {limite_token_sicuro} token")
        
        # Prepara il messaggio per l'API
        messages = []
        
        # Adatta il formato dei messaggi in base al modello
        if modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1"):
            # Per modelli che non supportano 'system', includiamo le istruzioni nel messaggio utente
            system_instruction = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate.\n\n"
            messages = [
                {"role": "user", "content": system_instruction + prompt_espansione}
            ]
            logger.info(f"Usando formato semplificato dei messaggi per il modello {modello}")
        else:
            # Per modelli che supportano 'system', usiamo il formato standard
            messages = [
                {"role": "system", "content": "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."},
                {"role": "user", "content": prompt_espansione}
            ]
        
        # Verifica il formato dei messaggi
        if not self._verifica_formato_messaggi(messages):
            logger.error(f"Formato dei messaggi non valido per l'espansione del capitolo {capitolo_id}")
            return {
                "success": False,
                "message": "Errore nel formato dei messaggi per l'API. Controlla i log per maggiori dettagli."
            }
        
        # Verifica esplicita dell'accesso al modello selezionato
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "Authorization": f"Bearer {self.api_key}"
                }
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers
                )
                
                if response.status_code == 200:
                    modelli_data = response.json()
                    modelli_disponibili = [model["id"] for model in modelli_data.get("data", [])]
                    
                    # Verifica se il modello selezionato è disponibile
                    if not any(m == modello or m.startswith(f"{modello}-") for m in modelli_disponibili):
                        logger.warning(f"Il modello {modello} non è disponibile. Modelli disponibili: {', '.join(modelli_disponibili[:10])}...")
                        
                        # Cerca un modello alternativo di alta qualità
                        modelli_alta_qualita = ["o1-preview", "o1", "gpt-4o", "gpt-4-turbo"]
                        for m_prefix in modelli_alta_qualita:
                            alternative = [m for m in modelli_disponibili if m.startswith(m_prefix)]
                            if alternative:
                                modello = alternative[0]
                                logger.info(f"Utilizzo del modello alternativo {modello} per l'espansione")
                                
                                # Aggiorna il formato dei messaggi in base al nuovo modello selezionato
                                if (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) > 1:
                                    # Converti da formato con system a formato senza system
                                    system_content = messages[0]["content"]
                                    user_content = messages[1]["content"]
                                    messages = [
                                        {"role": "user", "content": system_content + "\n\n" + user_content}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                elif not (modello.startswith("o1-preview") or modello.startswith("o1-mini") or modello.startswith("o1")) and len(messages) == 1:
                                    # Converti da formato senza system a formato con system
                                    combined_content = messages[0]["content"]
                                    # Estrai la parte system e user
                                    system_part = "Sei un assistente specializzato nell'espansione di contenuti didattici. Il tuo compito è espandere il contenuto fornito seguendo le istruzioni specificate."
                                    user_part = combined_content.replace(system_part + "\n\n", "")
                                    messages = [
                                        {"role": "system", "content": system_part},
                                        {"role": "user", "content": user_part}
                                    ]
                                    logger.info(f"Formato messaggi aggiornato per il nuovo modello {modello}")
                                
                                break
                        else:
                            logger.error("Nessun modello di alta qualità disponibile")
                            return {
                                "success": False,
                                "message": f"Nessun modello di alta qualità disponibile. Aggiorna il tuo account OpenAI per accedere ai modelli necessari."
                            }
        except Exception as e:
            logger.warning(f"Impossibile verificare l'accesso al modello {modello}: {str(e)}. Procedo comunque con la richiesta.")
        
        # Parametri per la chiamata API
        params = {
            "model": modello,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": limite_output_token,  # Usa il limite di output specifico del modello
            "top_p": 0.95,
            "frequency_penalty": 0.5,
            "presence_penalty": 0.5
        }
        
        # Adatta i parametri in base al modello
        if modello.startswith("o1"):
            # Per i modelli o1, alcuni parametri hanno nomi diversi o limiti diversi
            logger.info(f"Adattamento parametri per modello {modello}")
            
            # Mappa di compatibilità dei parametri per i modelli o1
            if modello.startswith("o1-preview"):
                # o1-preview ha restrizioni specifiche sui parametri
                # Rimuovi i parametri non supportati
                if "temperature" in params:
                    params.pop("temperature")  # temperature non supportato, usa il default (1)
                    logger.info("Rimosso parametro 'temperature' non supportato dal modello o1-preview")
                
                # Per o1-preview, usa max_completion_tokens invece di max_tokens
                if "max_tokens" in params:
                    params["max_completion_tokens"] = params.pop("max_tokens")
                    logger.info("Convertito 'max_tokens' in 'max_completion_tokens' per il modello o1-preview")
            elif modello.startswith("o1-mini"):
                # o1-mini potrebbe avere restrizioni simili
                # Rinomina max_tokens in max_completion_tokens
                if "max_tokens" in params:
                    params["max_completion_tokens"] = params.pop("max_tokens")
                
                # Assicurati che i parametri siano nel range corretto
                if "frequency_penalty" in params:
                    params["frequency_penalty"] = min(params["frequency_penalty"], 1.0)
                
                if "presence_penalty" in params:
                    params["presence_penalty"] = min(params["presence_penalty"], 1.0)
            else:
                # Altri modelli o1 (non preview/mini)
                # Assicurati che i parametri siano nel range corretto
                if "frequency_penalty" in params:
                    params["frequency_penalty"] = min(params["frequency_penalty"], 1.0)
                
                if "presence_penalty" in params:
                    params["presence_penalty"] = min(params["presence_penalty"], 1.0)
            
            # Aggiungi parametri specifici per tutti i modelli o1
            params["response_format"] = {"type": "text"}  # Assicura che la risposta sia in formato testo
            
            # Per o1-preview, usa max_completion_tokens invece di max_tokens
            if modello.startswith("o1-preview") or modello.startswith("o1-mini"):
                if "max_tokens" in params:
                    params["max_completion_tokens"] = params.pop("max_tokens")
        
        # Funzione per effettuare la richiesta API
        async def make_api_request():
            logger.info(f"Invio richiesta a OpenAI per espansione del capitolo {capitolo_id}")
            async with httpx.AsyncClient(timeout=120.0) as client:  # Timeout esteso a 120 secondi
                headers = {
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {self.api_key}"
                }
                
                # Log dei parametri della richiesta (senza contenuti sensibili)
                safe_params = params.copy()
                if "messages" in safe_params:
                    safe_params["messages"] = f"[{len(safe_params['messages'])} messaggi]"
                logger.debug(f"Parametri richiesta API: {safe_params}")
                
                response = await client.post(
                    f"{self.base_url}/v1/chat/completions",
                    json=params,
                    headers=headers
                )
                
                # Gestione specifica degli errori di autorizzazione
                if response.status_code == 403:
                    error_msg = "Errore di autorizzazione (403 Forbidden). "
                    try:
                        error_data = response.json()
                        if "error" in error_data and "message" in error_data["error"]:
                            error_msg += f"Dettagli: {error_data['error']['message']}"
                        else:
                            error_msg += "Verifica che la chiave API sia valida e che non siano stati superati i limiti di utilizzo."
                    except:
                        error_msg += "Verifica che la chiave API sia valida e che non siano stati superati i limiti di utilizzo."
                    
                    logger.error(f"Errore 403 Forbidden: {error_msg}")
                    raise httpx.HTTPStatusError(
                        error_msg,
                        request=response.request,
                        response=response
                    )
                
                # Gestione specifica degli errori di formato della richiesta
                if response.status_code == 400:
                    error_msg = "Errore nella richiesta (400 Bad Request). "
                    try:
                        error_data = response.json()
                        if "error" in error_data:
                            error_details = error_data["error"]
                            error_message = error_details.get("message", "")
                            error_param = error_details.get("param", "")
                            error_code = error_details.get("code", "")
                            
                            error_msg += f"Dettagli: {error_message}"
                            
                            # Log dettagliato per debug
                            logger.error(f"Errore 400 Bad Request: {error_details}")
                            
                            # Gestione specifica di errori comuni
                            if "maximum context length" in error_message.lower():
                                error_msg += " Il contenuto è troppo lungo per essere elaborato in una singola richiesta."
                            elif "unsupported value" in error_message.lower() and "with this model" in error_message.lower():
                                # Errore di parametro non supportato
                                logger.warning(f"Parametro non supportato: {error_param}. Adattamento automatico dei parametri.")
                                
                                # Tenta di adattare i parametri e riprovare
                                if error_param in params:
                                    # Rimuovi il parametro problematico
                                    params.pop(error_param, None)
                                    logger.info(f"Rimosso parametro non supportato: {error_param}")
                                    
                                    # Riprova la richiesta con i parametri aggiornati
                                    response = await client.post(
                                        f"{self.base_url}/v1/chat/completions",
                                        json=params,
                                        headers=headers
                                    )
                                    
                                    # Se la richiesta ha successo, restituisci il risultato
                                    if response.status_code == 200:
                                        return response.json()
                                    
                                    # Altrimenti, continua con la gestione degli errori
                                    error_msg += f" Tentativo di adattamento automatico fallito."
                            elif "invalid" in error_message.lower():
                                error_msg += " Uno o più parametri della richiesta non sono validi per il modello selezionato."
                        else:
                            error_msg += "La richiesta contiene parametri non validi o in formato errato."
                    except Exception as e:
                        error_msg += f"La richiesta contiene parametri non validi o in formato errato. Errore durante l'analisi: {str(e)}"
                    
                    logger.error(f"Errore 400 Bad Request: {error_msg}")
                    raise httpx.HTTPStatusError(
                        error_msg,
                        request=response.request,
                        response=response
                    )
                
                response.raise_for_status()
                return response.json()
        
        # Effettua la richiesta con retry
        try:
            response_data = await retry_with_exponential_backoff(
                make_api_request,
                max_retries=3,
                initial_backoff=2.0,
                backoff_factor=2.0
            )
            
            # Verifica che la risposta contenga i dati attesi
            if "choices" not in response_data or not response_data["choices"]:
                logger.error("Risposta API non valida: manca il campo 'choices' o è vuoto")
                return {
                    "success": False,
                    "message": "Risposta API non valida. Riprova più tardi."
                }
            
            # Estrai il contenuto generato
            try:
                contenuto_espanso = response_data["choices"][0]["message"]["content"]
            except (KeyError, IndexError) as e:
                logger.error(f"Errore nell'estrazione del contenuto dalla risposta: {str(e)}")
                logger.error(f"Struttura della risposta: {response_data}")
                return {
                    "success": False,
                    "message": "Errore nell'estrazione del contenuto dalla risposta API."
                }
            
            # Verifica che il contenuto espanso sia effettivamente più lungo dell'originale
            if len(contenuto_espanso) <= len(contenuto_originale):
                logger.warning(f"Il contenuto espanso non è più lungo dell'originale. Riprovo con parametri diversi.")
                
                # Modifica i parametri per ottenere una risposta più lunga, tenendo conto delle limitazioni del modello
                if not modello.startswith("o1-preview"):
                    # Solo per modelli che supportano temperature
                    params["temperature"] = 0.8
                    params["frequency_penalty"] = 0.7
                
                # Imposta max_tokens o max_completion_tokens in base al modello
                if modello.startswith("o1-preview") or modello.startswith("o1-mini"):
                    params["max_completion_tokens"] = limite_output_token
                else:
                    params["max_tokens"] = limite_output_token
                
                # Aggiorna il prompt per enfatizzare la necessità di espansione
                if len(messages) > 1 and "content" in messages[1]:
                    messages[1]["content"] += "\n\nIMPORTANTE: Il contenuto espanso DEVE essere significativamente più lungo dell'originale, con molti più dettagli, esempi e spiegazioni."
                elif len(messages) == 1 and "content" in messages[0]:
                    messages[0]["content"] += "\n\nIMPORTANTE: Il contenuto espanso DEVE essere significativamente più lungo dell'originale, con molti più dettagli, esempi e spiegazioni."
                
                # Aggiorna i messaggi nei parametri
                params["messages"] = messages
                
                # Riprova la richiesta
                response_data = await retry_with_exponential_backoff(
                    make_api_request,
                    max_retries=2,
                    initial_backoff=2.0,
                    backoff_factor=2.0
                )
                
                # Verifica che la risposta contenga i dati attesi
                if "choices" not in response_data or not response_data["choices"]:
                    logger.error("Risposta API non valida nel secondo tentativo: manca il campo 'choices' o è vuoto")
                    return {
                        "success": False,
                        "message": "Risposta API non valida nel secondo tentativo. Riprova più tardi."
                    }
                
                # Estrai il nuovo contenuto generato
                try:
                    contenuto_espanso = response_data["choices"][0]["message"]["content"]
                except (KeyError, IndexError) as e:
                    logger.error(f"Errore nell'estrazione del contenuto dalla risposta nel secondo tentativo: {str(e)}")
                    logger.error(f"Struttura della risposta: {response_data}")
                    return {
                        "success": False,
                        "message": "Errore nell'estrazione del contenuto dalla risposta API nel secondo tentativo."
                    }
                
                # Verifica nuovamente la lunghezza
                if len(contenuto_espanso) <= len(contenuto_originale):
                    logger.error(f"Impossibile generare un contenuto espanso più lungo dell'originale dopo due tentativi.")
                    return {
                        "success": False,
                        "message": "Impossibile espandere il contenuto. Il testo generato non è più lungo dell'originale."
                    }
            
            # Calcola statistiche sull'espansione
            try:
                token_utilizzati = response_data["usage"]["total_tokens"]
                token_risposta = response_data["usage"]["completion_tokens"]
                fattore_espansione = round(len(contenuto_espanso) / len(contenuto_originale), 1)
                
                logger.info(f"Espansione completata: {len(contenuto_originale)} → {len(contenuto_espanso)} caratteri (fattore: {fattore_espansione}x)")
                logger.info(f"Token utilizzati: {token_utilizzati} (risposta: {token_risposta})")
                
                return {
                    "success": True,
                    "contenuto": contenuto_espanso,
                    "modello_utilizzato": modello,
                    "token_utilizzati": token_utilizzati,
                    "token_risposta": token_risposta,
                    "fattore_espansione": fattore_espansione,
                    "lunghezza_originale": len(contenuto_originale),
                    "lunghezza_espansa": len(contenuto_espanso)
                }
            except KeyError as e:
                logger.warning(f"Impossibile calcolare alcune statistiche: {str(e)}. Continuo comunque.")
                # Restituisci comunque il risultato, anche senza alcune statistiche
                return {
                    "success": True,
                    "contenuto": contenuto_espanso,
                    "modello_utilizzato": modello,
                    "fattore_espansione": round(len(contenuto_espanso) / len(contenuto_originale), 1),
                    "lunghezza_originale": len(contenuto_originale),
                    "lunghezza_espansa": len(contenuto_espanso)
                }
            
        except Exception as e:
            logger.error(f"Errore di connessione persistente all'API OpenAI dopo diversi tentativi: {str(e)}")
            return {
                "success": False,
                "message": f"Errore di connessione persistente all'API: {str(e)}. Riprova più tardi."
            }
    
    def _seleziona_modello_per_espansione(self) -> str:
        """
        Seleziona il modello più adatto per l'espansione dei contenuti.
        
        Returns:
            Nome del modello da utilizzare
        """
        # Verifica se il modello configurato è disponibile
        modello_configurato = get_config_value("openai_model")
        
        # Definizione dei modelli con le loro caratteristiche
        modelli_info = {
            "o1-preview": {
                "qualita": "altissima",
                "limitazioni": "Non supporta temperature personalizzate",
                "fallback": ["o1", "gpt-4o", "gpt-4-turbo"],
                "max_input_tokens": 128000,  # Supporta fino a 128k token di input
                "max_output_tokens": 4096    # Output massimo di 4k token
            },
            "o1": {
                "qualita": "altissima",
                "limitazioni": "Potrebbe avere alcune limitazioni sui parametri",
                "fallback": ["o1-preview", "gpt-4o", "gpt-4-turbo"],
                "max_input_tokens": 32768,   # Supporta fino a 32k token di input
                "max_output_tokens": 4096    # Output massimo di 4k token
            },
            "gpt-4o": {
                "qualita": "alta",
                "limitazioni": "Nessuna limitazione significativa",
                "fallback": ["gpt-4-turbo", "gpt-4"],
                "max_input_tokens": 128000,  # Supporta fino a 128k token di input
                "max_output_tokens": 4096    # Output massimo di 4k token
            },
            "gpt-4-turbo": {
                "qualita": "alta",
                "limitazioni": "Nessuna limitazione significativa",
                "fallback": ["gpt-4", "gpt-4o"],
                "max_input_tokens": 128000,  # Supporta fino a 128k token di input
                "max_output_tokens": 4096    # Output massimo di 4k token
            },
            "gpt-4": {
                "qualita": "alta",
                "limitazioni": "Nessuna limitazione significativa",
                "fallback": ["gpt-4-turbo", "gpt-4o"],
                "max_input_tokens": 8192,    # Supporta fino a 8k token di input
                "max_output_tokens": 4096    # Output massimo di 4k token
            }
        }
        
        # Lista di modelli in ordine di preferenza
        modelli_preferiti = ["o1-preview", "o1", "gpt-4o", "gpt-4-turbo", "gpt-4"]
        
        # Se il modello configurato è tra quelli supportati, usalo
        if modello_configurato in modelli_info:
            logger.info(f"Utilizzo del modello configurato {modello_configurato} per l'espansione")
            logger.info(f"Qualità: {modelli_info[modello_configurato]['qualita']}")
            logger.info(f"Limitazioni: {modelli_info[modello_configurato]['limitazioni']}")
            return modello_configurato
        
        # Altrimenti, usa il primo modello disponibile in ordine di preferenza
        for modello in modelli_preferiti:
            if modello in self.available_models:
                logger.info(f"Modello configurato {modello_configurato} non supportato. Utilizzo {modello} per l'espansione")
                logger.info(f"Qualità: {modelli_info[modello]['qualita']}")
                logger.info(f"Limitazioni: {modelli_info[modello]['limitazioni']}")
                return modello
        
        # Se nessun modello preferito è disponibile, usa o1-preview come default
        logger.info(f"Nessun modello preferito disponibile. Utilizzo o1-preview per l'espansione")
        logger.info(f"Qualità: {modelli_info['o1-preview']['qualita']}")
        logger.info(f"Limitazioni: {modelli_info['o1-preview']['limitazioni']}")
        return "o1-preview"
    
    def _stima_token(self, testo: str) -> int:
        """
        Stima approssimativa del numero di token in un testo.
        
        Args:
            testo: Testo da analizzare
            
        Returns:
            Numero stimato di token
        """
        # Stima più precisa basata su regole euristiche
        # 1 token ≈ 4 caratteri in inglese, ma può variare
        
        # Conta le parole (approssimazione migliore per l'italiano)
        parole = len(testo.split())
        
        # Conta i caratteri speciali e la punteggiatura
        import re
        caratteri_speciali = len(re.findall(r'[^\w\s]', testo))
        
        # Stima finale: ogni parola è circa 1.3 token in media
        # Aggiungiamo un fattore di sicurezza del 20%
        stima_token = int((parole * 1.3 + caratteri_speciali * 0.5) * 1.2)
        
        # Assicuriamoci di non sottostimare
        return max(stima_token, len(testo) // 3)
    
    def _verifica_formato_messaggi(self, messages: List[Dict[str, str]]) -> bool:
        """
        Verifica che il formato dei messaggi sia valido per l'API di OpenAI.
        
        Args:
            messages: Lista di messaggi da verificare
            
        Returns:
            True se il formato è valido, False altrimenti
        """
        if not isinstance(messages, list) or not messages:
            logger.error("Il formato dei messaggi non è valido: deve essere una lista non vuota")
            return False
        
        for msg in messages:
            if not isinstance(msg, dict):
                logger.error(f"Messaggio non valido: {msg} - deve essere un dizionario")
                return False
            
            if "role" not in msg or "content" not in msg:
                logger.error(f"Messaggio non valido: {msg} - deve contenere 'role' e 'content'")
                return False
            
            if msg["role"] not in ["system", "user", "assistant"]:
                logger.error(f"Ruolo non valido: {msg['role']} - deve essere 'system', 'user' o 'assistant'")
                return False
            
            if not isinstance(msg["content"], str) or not msg["content"]:
                logger.error(f"Contenuto non valido: {msg['content']} - deve essere una stringa non vuota")
                return False
        
        return True
    
    def _tronca_testo_per_token(self, testo: str, limite_token: int) -> str:
        """
        Tronca un testo per rientrare in un limite di token specificato.
        
        Args:
            testo: Testo da troncare
            limite_token: Limite massimo di token
            
        Returns:
            Testo troncato
        """
        # Stima il numero di token nel testo
        num_token_stimati = self._stima_token(testo)
        
        # Se il testo è già sotto il limite, restituiscilo così com'è
        if num_token_stimati <= limite_token:
            return testo
        
        # Calcola la percentuale di testo da mantenere
        percentuale = limite_token / num_token_stimati
        
        # Tronca il testo in base alla percentuale
        lunghezza_troncata = int(len(testo) * percentuale * 0.9)  # Usiamo un fattore di sicurezza del 10%
        
        # Tronca il testo
        testo_troncato = testo[:lunghezza_troncata]
        
        # Assicurati di non troncare a metà di una parola
        ultimo_spazio = testo_troncato.rfind(' ')
        if ultimo_spazio > 0:
            testo_troncato = testo_troncato[:ultimo_spazio]
        
        # Aggiungi un messaggio che indica che il testo è stato troncato
        testo_troncato += "\n\n[...testo troncato per limiti di token...]"
        
        logger.warning(f"Testo troncato da {num_token_stimati} token stimati a circa {limite_token} token")
        
        return testo_troncato

    async def verifica_chiave_api(self) -> Dict[str, Any]:
        """
        Verifica la validità della chiave API effettuando una richiesta di test.
        
        Returns:
            Dizionario con il risultato della verifica
        """
        logger.info("Verifica della validità della chiave API")
        
        try:
            # Effettua una richiesta semplice per verificare la chiave API
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "Authorization": f"Bearer {self.api_key}"
                }
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers
                )
                
                if response.status_code == 200:
                    logger.info("Chiave API valida")
                    
                    # Verifica l'accesso ai modelli di alta qualità
                    try:
                        modelli_data = response.json()
                        modelli_disponibili = [model["id"] for model in modelli_data.get("data", [])]
                        
                        # Modelli di alta qualità che vogliamo verificare
                        modelli_alta_qualita = ["o1-preview", "o1", "gpt-4o", "gpt-4-turbo"]
                        modelli_disponibili_alta_qualita = [m for m in modelli_disponibili if any(m.startswith(prefix) for prefix in modelli_alta_qualita)]
                        
                        if modelli_disponibili_alta_qualita:
                            logger.info(f"Account ha accesso ai seguenti modelli di alta qualità: {', '.join(modelli_disponibili_alta_qualita)}")
                            return {
                                "success": True,
                                "message": f"Chiave API valida. Modelli di alta qualità disponibili: {', '.join(modelli_disponibili_alta_qualita)}",
                                "modelli_disponibili": modelli_disponibili_alta_qualita
                            }
                        else:
                            logger.warning("Account non ha accesso a modelli di alta qualità")
                            return {
                                "success": False,
                                "message": "La chiave API è valida, ma l'account non ha accesso ai modelli di alta qualità necessari (o1-preview, o1, gpt-4o, gpt-4-turbo). Aggiorna il tuo account OpenAI per accedere a questi modelli."
                            }
                    except Exception as e:
                        logger.error(f"Errore nell'analisi dei modelli disponibili: {str(e)}")
                        return {
                            "success": True,
                            "message": "Chiave API valida, ma non è stato possibile verificare l'accesso ai modelli di alta qualità."
                        }
                elif response.status_code == 403:
                    error_msg = "Chiave API non valida o senza permessi sufficienti"
                    try:
                        error_data = response.json()
                        if "error" in error_data and "message" in error_data["error"]:
                            error_msg = f"Errore di autorizzazione: {error_data['error']['message']}"
                    except:
                        pass
                    
                    logger.error(f"Errore 403 durante la verifica della chiave API: {error_msg}")
                    return {
                        "success": False,
                        "message": error_msg
                    }
                else:
                    logger.error(f"Errore {response.status_code} durante la verifica della chiave API")
                    return {
                        "success": False,
                        "message": f"Errore {response.status_code} durante la verifica della chiave API"
                    }
        except Exception as e:
            logger.error(f"Eccezione durante la verifica della chiave API: {str(e)}")
            return {
                "success": False,
                "message": f"Errore durante la verifica della chiave API: {str(e)}"
            }

    async def get_available_models(self) -> List[str]:
        """
        Ottiene la lista dei modelli disponibili per l'account.
        
        Returns:
            Lista dei modelli disponibili
        """
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "Authorization": f"Bearer {self.api_key}"
                }
                response = await client.get(
                    f"{self.base_url}/v1/models",
                    headers=headers
                )
                
                if response.status_code == 200:
                    modelli_data = response.json()
                    return [model["id"] for model in modelli_data.get("data", [])]
                else:
                    logger.error(f"Errore {response.status_code} nel recupero dei modelli disponibili")
                    return []
        except Exception as e:
            logger.error(f"Eccezione nel recupero dei modelli disponibili: {str(e)}")
            return []

class MockAIClient(AIClient):
    """Client di mock per test senza API reali."""
    
    def __init__(self):
        super().__init__("mock_key", "mock_url", "mock")
        logger.info("Inizializzato client di mock")
    
    async def genera_scaletta_corso(self, parametri: Dict[str, Any]) -> Dict[str, Any]:
        """Genera una scaletta di corso di esempio."""
        logger.info(f"[MOCK] Generazione scaletta per: {parametri['titolo']}")
        
        # Esempio di scaletta per il test
        scaletta = {
            "titolo": parametri['titolo'],
            "descrizione": parametri['descrizione'],
            "durata_stimata": "10 ore",
            "capitoli": [
                {
                    "id": "cap1",
                    "titolo": "Introduzione al corso",
                    "descrizione": "Panoramica generale dei concetti che verranno trattati",
                    "sottoargomenti": [
                        {
                            "titolo": "Obiettivi del corso",
                            "punti_chiave": ["Comprendere i fondamenti", "Applicare le conoscenze", "Sviluppare competenze pratiche"]
                        },
                        {
                            "titolo": "Metodologia didattica",
                            "punti_chiave": ["Approccio teorico-pratico", "Esercitazioni guidate", "Progetti reali"]
                        }
                    ]
                },
                {
                    "id": "cap2",
                    "titolo": "Concetti fondamentali",
                    "descrizione": "I principi base della materia",
                    "sottoargomenti": [
                        {
                            "titolo": "Terminologia essenziale",
                            "punti_chiave": ["Definizioni chiave", "Contesto storico", "Evoluzione dei concetti"]
                        },
                        {
                            "titolo": "Framework teorico",
                            "punti_chiave": ["Principi fondamentali", "Modelli concettuali", "Applicazioni pratiche"]
                        }
                    ]
                },
                {
                    "id": "cap3",
                    "titolo": "Applicazioni pratiche",
                    "descrizione": "Come applicare le conoscenze in contesti reali",
                    "sottoargomenti": [
                        {
                            "titolo": "Casi di studio",
                            "punti_chiave": ["Analisi di esempi reali", "Lezioni apprese", "Best practices"]
                        },
                        {
                            "titolo": "Esercitazioni guidate",
                            "punti_chiave": ["Step-by-step tutorial", "Risoluzione di problemi comuni", "Tecniche avanzate"]
                        }
                    ]
                }
            ]
        }
        
        return {
            "success": True,
            "scaletta": scaletta
        }
    
    async def genera_contenuto_capitolo(self, parametri_corso: Dict[str, Any], 
                                     scaletta: Dict[str, Any], 
                                     capitolo_id: str,
                                     contenuto_precedente: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Genera contenuto di esempio per un capitolo."""
        logger.info(f"[MOCK] Generazione contenuto per capitolo: {capitolo_id}")
        
        # Trova il capitolo
        capitolo = None
        for cap in scaletta['capitoli']:
            if cap['id'] == capitolo_id:
                capitolo = cap
                break
        
        if not capitolo:
            return {
                "success": False,
                "message": f"Capitolo con ID {capitolo_id} non trovato"
            }
        
        # Genera un contenuto di esempio
        contenuto = f"""# {capitolo['titolo']}

{capitolo['descrizione']}

## Introduzione
Questo capitolo esplora i concetti fondamentali di {capitolo['titolo'].lower()}, fornendo una solida base per comprendere 
i temi trattati nel corso. L'obiettivo è quello di fornire sia le conoscenze teoriche che gli strumenti pratici 
per applicare questi concetti in situazioni reali.

"""
        
        # Aggiungi contenuto per ogni sottoargomento
        sotto_items = capitolo.get('sottoargomenti', capitolo.get('sottocapitoli', []))
        for sotto in sotto_items:
            contenuto += f"## {sotto['titolo']}\n\n"
            contenuto += f"In questa sezione affronteremo {sotto['titolo'].lower()}, un aspetto cruciale per la comprensione complessiva della materia.\n\n"
            
            # Aggiungi paragrafi per ogni punto chiave
            if 'punti_chiave' in sotto:
                for punto in sotto['punti_chiave']:
                    contenuto += f"### {punto}\n\n"
                    contenuto += f"L'aspetto di {punto.lower()} è fondamentale perché consente di sviluppare una comprensione più profonda dell'argomento. "
                    contenuto += "Questo concetto si collega a vari aspetti pratici e teorici che esploreremo in dettaglio.\n\n"
                    contenuto += "Esempio pratico: [Qui verrebbe inserito un esempio reale relativo a questo punto chiave].\n\n"
            elif 'descrizione' in sotto:
                contenuto += f"{sotto['descrizione']}\n\n"
                contenuto += "Esempio pratico: [Qui verrebbe inserito un esempio reale relativo a questo sottoargomento].\n\n"
        
        # Aggiungi una conclusione
        contenuto += "## Conclusione\n\n"
        contenuto += f"In questo capitolo abbiamo esplorato {capitolo['titolo'].lower()}, partendo dai concetti base fino ad arrivare alle applicazioni pratiche. "
        contenuto += "Questi concetti costituiranno le fondamenta per i capitoli successivi, dove approfondiremo ulteriormente gli aspetti più avanzati della materia."
        
        return {
            "success": True,
            "contenuto": contenuto
        }

# Istanza globale del client
deepseek_client = None

def create_ai_client():
    """Crea un'istanza del client AI in base alla configurazione."""
    global deepseek_client
    
    # Carica la configurazione
    config = load_config()
    provider = config.get('ai_provider', 'mock')
    
    if provider == 'deepseek':
        api_key = config.get('deepseek_api_key', '')
        base_url = config.get('deepseek_base_url', 'https://api.deepseek.com')
        
        if not api_key:
            logger.warning("API key DeepSeek non configurata. Utilizzo del client di mock.")
            return MockAIClient()
        
        deepseek_client = DeepSeekClient(api_key=api_key, base_url=base_url)
        return deepseek_client
    
    elif provider == 'openai':
        api_key = config.get('openai_api_key', '')
        base_url = config.get('openai_base_url', 'https://api.openai.com')
        
        if not api_key:
            logger.warning("API key OpenAI non configurata. Utilizzo del client di mock.")
            return MockAIClient()
        
        return OpenAIClient(api_key=api_key, base_url=base_url)
    
    else:
        # Default a mock se il provider non è riconosciuto
        logger.warning(f"Provider AI '{provider}' non riconosciuto. Utilizzo del client di mock.")
        return MockAIClient()

# Inizializza il client al momento dell'importazione
deepseek_client = create_ai_client() 